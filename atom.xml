<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code for fun</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://frezc.github.io/"/>
  <updated>2019-04-02T14:50:51.749Z</updated>
  <id>https://frezc.github.io/</id>
  
  <author>
    <name>Freeze Crow</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>大阪游记</title>
    <link href="https://frezc.github.io/2019/03/30/osaka-travel/"/>
    <id>https://frezc.github.io/2019/03/30/osaka-travel/</id>
    <published>2019-03-30T15:02:10.000Z</published>
    <updated>2019-04-02T14:50:51.749Z</updated>
    
    <content type="html"><![CDATA[<p>这个月中旬去和同事去大阪玩了几天，趁着这个月还没结束写个游记吧，内容应该会比较流水账。</p><h1 id="事前规划很重要"><a href="#事前规划很重要" class="headerlink" title="事前规划很重要"></a>事前规划很重要</h1><p>这次虽然也是自由行但是比年初去东京的那次体验好得多吧，上次虽然有一大目的是参加CM，但是除此之外还是有不少时间可以到处玩的，不过缺乏规划的我们也没去成多少地方，主要是因为没有目标就很难有动力到处跑。</p><p>这次去的时候发现google地图真是好用，里面保存地点的功能是规划神器啊，这里分享一下我们这次<a href="https://www.google.com/maps/placelists/list/9smJRMlD4-4GxkbP8HMcSxe5nOzIcQ?hl=zh" target="_blank" rel="noopener">大阪行程的规划</a>（当然里面有因为时间缘故很多没去的地方）。地点里还有个分享的功能，适合和小伙伴一起编辑和投票，这个功能和自己保存的地方不能互通，也是比较奇怪。</p><p>如果要去圣地巡礼的话，可以利用<a href="https://seichimap.jp/" target="_blank" rel="noopener">这个网站</a>找到感兴趣的地点，它会直接给你google map的地点，然后保存到自己的列表里再做规划。</p><p>另外要注意景点的时间限制，日本的景点很多下午就关门了，要早去。</p><h1 id="飞机、酒店和电话卡"><a href="#飞机、酒店和电话卡" class="headerlink" title="飞机、酒店和电话卡"></a>飞机、酒店和电话卡</h1><p>这次虽然是自由行，机酒还是通过旅行社购买的（公司规定），可能会比单买贵一点吧，不过会方便一些。这次坐的厦航和全日空比，除了没有座位前的小平板外其实没什么差距，体验还不错。酒店住的是HOTEL MYSTAYS Otemae，算是名宿？相比之前秋叶原住的酒店便宜很多，房间也大很多（感觉有2倍大），除了没有每日打扫和厕所有点味外和住一般酒店差不多吧，但是实惠很多。</p><p>前次去东京玩一个很大的问题就是定位总是会失效，这次换了一家买电话卡，结果是要好一些，除了在车站和地铁里外都能好好工作，不知道这方面WIFI是不是会好用一些。</p><h1 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h1><p>中午坐的飞机再坐电车到酒店都已经傍晚了，这次坐的是普通电车只要1000多一点，大阪这边也有类似东京的skyliner的haruka，需要额外买票，看了下haruka的到达时间没有快多少，价格却贵了不少。</p><p>到了大阪的车站就发现和东京很不同的一点，在东京的车站里是没有“出口”这个称呼的，写的都是“改札口”（检票口），而在大阪的车站里则是清一色的“出口”，可能是地方差异吧。还有一点是在车站地铁里大多是右侧通行，我印象中东京靠左的比较多。</p><p>晚上在道頓堀附近逛了一下，吃了一餐烤肉。</p><h1 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h1><p>第二天上午先去了日本桥附近，逛了下黑门市场、一些动漫游戏店和信长书店（我也不知道为什么要进去了）。中午吃了王将（饺子就一种，但是没有国内的油腻）后就去大阪城了。</p><p>大阪城公园还是挺大的，要说有什么特别的话就是乌鸦很多吧。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="osaka-castle-park-karasu.jpg" alt="随处可见的乌鸦" title>                </div>                <div class="image-caption">随处可见的乌鸦</div>            </figure></p><p>大阪城作为很多电影游戏里的常客，实际看到比想象里的小一些。里面有很多层，基本都是讲相关历史，展出的一些重制的（也可能是原版）武士刀、火器、服装、屏风等挺有意思的。</p><p>之后去了梅田附近，逛了逛大阪站这里的pokemon center，买了些小东西；去附近的游戏厅玩了一会；坐了次hep five摩天轮，这个我到觉得白天坐比较好，晚上没什么好看的。晚餐是一风堂的拉面，听说这家是以比较辣的拉面出名的，不过当时没点那款，听小伙伴描述并不辣的样子。</p><h1 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h1><p>这天就是神户一日游，神户这里有很多fate里冬木市的取景地，所有算是一次圣地巡礼了。</p><p>上午先走了一遍神户大桥和附近的公园，很容易会想起fate里的一些名场景。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="kobe-ohashi.jpg" alt="从旁边公园里拍的神户大桥" title>                </div>                <div class="image-caption">从旁边公园里拍的神户大桥</div>            </figure><p>之后去了北野异人馆街，这里的看点就是比较欧式风格的建筑吧，不过对fate fans来说也是一大圣地，有好几处熟悉的取景地。下面是風見鶏の館，fate中远坂凛家的取景地。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="kazamidori.jpg" alt="風見鶏の館" title>                </div>                <div class="image-caption">風見鶏の館</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="kazamidori-table.jpg" alt="桌子上有一些熟悉的纸人，后面藏着一个pipi美" title>                </div>                <div class="image-caption">桌子上有一些熟悉的纸人，后面藏着一个pipi美</div>            </figure><p>中午去吃了神户牛（还是烤肉），似乎神户这里的牛肉店都是神户牛啊。</p><p>之后本来预想是去六甲山牧场的，但是到六甲山下已经3点多了，被告知牧场4点半就不让进了，坐铁轨上山+公交到牧场是来不及的，所以只能放弃去牧场了。</p><p>上山后大概4点多本想去下摩耶山掬星台，不过巴士司机告诉我们这是最后一班车，不能过去了，至于理由日语太烂了没问清。之后就只能去东面玩了。</p><p>在六甲山天览台俯视风景还是很棒的，能看到云朵就在很近的距离飘过，就是风太大了，这个季节还是有点冷。在一个甜品店坐到晚上看看夜景就回去了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="rokko-terasu.jpg" alt="白天俯瞰风景" title>                </div>                <div class="image-caption">白天俯瞰风景</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="rokko-terasu-yoru.jpg" alt="傍晚" title>                </div>                <div class="image-caption">傍晚</div>            </figure><p>晚餐吃了蟹道乐，个人最喜欢的是前菜的生蟹，比较像温州的江蟹生。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="douraku.jpg" alt="放毒" title>                </div>                <div class="image-caption">放毒</div>            </figure><h1 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h1><p>第四天去的是京都一块。</p><p>京都这边寺庙很多，其中也有不少圣地，光看各种寺庙和神社都能走一天。这天先去看了伏见稻荷大社，这个神社的特点就是一排排鸟居了，上面都刻着捐赠者的名字，走在千本鸟居下爬了一圈山，风景不错但是一早就爬山真的很累。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="senbontorii.jpg" alt="千本鳥居" title>                </div>                <div class="image-caption">千本鳥居</div>            </figure><p>去拉面小路吃了一份黑富山酱油拉面后就坐公交到了清水寺，这次来得不巧，最有特色的建筑刚好在维修，从外面看着怪怪的。内部能看到很多含苞待放的樱花，晚来几天应该会非常好看。清水寺下来是一块很大的墓地，这边也没什么可看的，最好还是原路返回出去。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="kiyomizutemple.jpg" alt="维修中的清水寺" title>                </div>                <div class="image-caption">维修中的清水寺</div>            </figure><p>随后去了花见小路附近，因为还是下午好像店都没开，不过街上人是真的多。</p><p>休息了一下就向宇治出发了，顺路刚好先去看了下京阿尼的两栋办公楼。其中一栋下面是个周边店，卖京都动画的各种周边，这里有卖叫“生動画”的东西，看起来是一些分镜原稿之类的东西。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="kyoani.jpg" alt="京阿尼" title>                </div>                <div class="image-caption">京阿尼</div>            </figure><p>随后电车坐到了宇治站，本来以为很看到京吹的一些人物牌子，好像被撤掉了。宇治这里的话就是京吹的主要取景地了，能看到这么多动画里的原场景还是很让人激动的。过了宇治桥，沿着宇治川往南走，发现这边虽然比较乡下但还是会有旅游团会来的，毕竟还是有“宇治抹茶”这个特产。我们来的这个季节倒也没什么游客（人也很少），又不巧的是宇治川的岸边被封住了，中间的小岛也在建什么东西的样子。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="ujihashi.jpg" alt="桥" title>                </div>                <div class="image-caption">桥</div>            </figure><p>宇治这里有4个附带名场景的桥，上面这个应该是最不知名的一个。沿着岸边走完了几个桥就去大吉山展望台了，算是京吹第8话的圣地巡礼吧。</p><p>路上会遇到宇治神社和宇治上神社，在神社里甚至还能看到京吹剧场版的宣传图。展望台这只有一个小亭子，如果没有京吹里那么甜的一幕，应该也不会有很多参观者吧。这边并不高，但是几乎能把整个宇治收入眼底，待这看了日落就下去了。这里山路没有灯，路上还有凸起来的树枝和石头，晚上还是有一点危险的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="daikichiyama.jpg" alt="大吉山展望台" title>                </div>                <div class="image-caption">大吉山展望台</div>            </figure><p>宇治这里我还是挺喜欢的，人少很安静，路上也能看到一些和我们相同目的的人。之后要走的时候看到车站附近有一家回转寿司店，就顺路吃了晚餐。去日本玩的话回转寿司还是吃饭的好去处，好吃不贵，点餐也是自助的。</p><h1 id="第五天"><a href="#第五天" class="headerlink" title="第五天"></a>第五天</h1><p>最后一天就是收拾东西回家了，去机场坐的电车还有前半后半目的地不同的操作，这个google map上是不会告诉你的，需要注意一下。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>最后做一遍技术总结，要想玩得开心，有以下要领：</p><ul><li>提前规划，和小伙伴讨论行程</li><li>量力而为，太累会影响后面情绪</li><li>兴趣使然，如果要去圣地巡游，那么有顺路的名景点就去吧，不然就不要强迫自己去了</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个月中旬去和同事去大阪玩了几天，趁着这个月还没结束写个游记吧，内容应该会比较流水账。&lt;/p&gt;
&lt;h1 id=&quot;事前规划很重要&quot;&gt;&lt;a href=&quot;#事前规划很重要&quot; class=&quot;headerlink&quot; title=&quot;事前规划很重要&quot;&gt;&lt;/a&gt;事前规划很重要&lt;/h1&gt;&lt;p
      
    
    </summary>
    
      <category term="essay" scheme="https://frezc.github.io/categories/essay/"/>
    
    
      <category term="旅游" scheme="https://frezc.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>react hooks踩坑记录</title>
    <link href="https://frezc.github.io/2019/03/23/react-hooks-traps/"/>
    <id>https://frezc.github.io/2019/03/23/react-hooks-traps/</id>
    <published>2019-03-23T03:02:14.000Z</published>
    <updated>2019-03-25T16:14:48.551Z</updated>
    
    <content type="html"><![CDATA[<p>自从 <a href="mailto:react@16.8" target="_blank" rel="noopener">react@16.8</a> 正式发布react hooks已经有一段时间了，这段时间我也一直在项目里使用hook的方式来写组件，其间也遇到了不少问题，下面列一下踩坑记录。</p><p>该篇假设你已经了解react hooks的基本用法，如果对react hooks毫不了解，建议先阅读<a href="https://reactjs.org/docs/hooks-intro.html" target="_blank" rel="noopener">官方文档</a>。</p><h1 id="想在第一次render前执行的代码，可以放在useState里"><a href="#想在第一次render前执行的代码，可以放在useState里" class="headerlink" title="想在第一次render前执行的代码，可以放在useState里"></a>想在第一次render前执行的代码，可以放在useState里</h1><p>类似class component里的<code>constructor</code>和<code>componentWillMount</code>。例如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = useRef(<span class="literal">null</span>);</span><br><span class="line">useState(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  instance.current = <span class="string">'initial value'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h1 id="useState里数据务必为immutable"><a href="#useState里数据务必为immutable" class="headerlink" title="useState里数据务必为immutable"></a>useState里数据务必为immutable</h1><p>虽然class component的state也提倡使用immutable数据，但不是强制的，因为只要调用了<code>setState</code>就会触发更新。但是使用<code>useState</code>时，如果在更新函数里传入同一个对象将<strong>无法</strong>触发更新。</p><p>举个例子，有时可能会写出这种代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [list, setList] = useState([<span class="number">2</span>,<span class="number">32</span>,<span class="number">1</span>,<span class="number">534</span>,<span class="number">44</span>]);</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  &lt;&gt;</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line">      &#123;list.map(<span class="function"><span class="params">v</span> =&gt;</span> &lt;li key=&#123;v&#125;&gt;&#123;v&#125;&lt;<span class="regexp">/li&gt;)&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>ol&gt;</span><br><span class="line">    &lt;button</span><br><span class="line">      onClick=&#123;() =&gt; &#123;</span><br><span class="line">        <span class="comment">// bad 这样无法触发更新</span></span><br><span class="line">        setList(list.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b));</span><br><span class="line">        <span class="comment">// good 必须传入一个新的对象</span></span><br><span class="line">        setList(list.slice().sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b));</span><br><span class="line">      &#125;&#125;</span><br><span class="line">    &gt;sort&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h1 id="useMemo-has-no-semantic-guarantee"><a href="#useMemo-has-no-semantic-guarantee" class="headerlink" title="useMemo has no semantic guarantee"></a>useMemo has no semantic guarantee</h1><p>这句话出自useMemo的<a href="https://reactjs.org/docs/hooks-reference.html#usememo" target="_blank" rel="noopener">API Reference</a>。</p><blockquote><p><strong>You may rely on <code>useMemo</code> as a performance optimization, not as a semantic guarantee.</strong> In the future, React may choose to “forget” some previously memoized values and recalculate them on next render, e.g. to free memory for offscreen components. Write your code so that it still works without <code>useMemo</code> — and then add it to optimize performance.</p></blockquote><p>也就是说在未来react的版本，<code>useMemo</code>在必要时会清除缓存而重新执行creater function，所以最好不要使用<code>useMemo</code>来执行具有<strong>side effect</strong>的函数。</p><p>举个例子，比如我想实现基于lodash throttle的hook，使用<code>useMemo</code>来实现会比较理想，类似下面的代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> thRef = useRef(<span class="literal">null</span>);</span><br><span class="line">useMemo(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (thRef.current) &#123;</span><br><span class="line">    thRef.current.cancel();</span><br><span class="line">  &#125;</span><br><span class="line">  thRef.current = _.throttle(fn, wait, options);</span><br><span class="line">&#125;, [wait, options &amp;&amp; options.leading, options &amp;&amp;options.trailing]);</span><br><span class="line"><span class="comment">// ...other codes</span></span><br></pre></td></tr></table></figure></p><p>目前这么写是没问题，但是考虑到未来react实现了上述“forget”特性的话，这样的代码就可能产生预料之外的结果，解决方法就是自己实现一个稳定的useMemo，<a href="https://github.com/Frezc/use-lodash-debounce-throttle/blob/master/src/use-stable-memo.ts" target="_blank" rel="noopener">实现示例</a>。</p><h1 id="useEffect和useLayoutEffect有什么区别？"><a href="#useEffect和useLayoutEffect有什么区别？" class="headerlink" title="useEffect和useLayoutEffect有什么区别？"></a>useEffect和useLayoutEffect有什么区别？</h1><p>简单来说就是调用时机不同，<code>useLayoutEffect</code>和原来<code>componentDidMount</code>&amp;<code>componentDidUpdate</code>一致，在react完成DOM更新后马上<strong>同步</strong>调用的代码，会阻塞页面渲染。而<code>useEffect</code>是会在整个页面渲染完才会调用的代码。</p><p>官方建议优先使用<code>useEffect</code></p><blockquote><p>However, <strong>we recommend starting with useEffect first</strong> and only trying useLayoutEffect if that causes a problem.</p></blockquote><p>在实际使用时如果想避免页面抖动（在<code>useEffect</code>里修改DOM很有可能出现）的话，可以把需要操作DOM的代码放在<code>useLayoutEffect</code>里。</p><p>不过<code>useLayoutEffect</code>在服务端渲染时会出现一个warning，要消除的话得用<code>useEffect</code>代替或者推迟渲染时机。见<a href="https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85" target="_blank" rel="noopener">说明</a>和<a href="https://github.com/facebook/react/issues/14927" target="_blank" rel="noopener">讨论</a>。</p><h1 id="在useEffect和useLayoutEffect里使用async函数"><a href="#在useEffect和useLayoutEffect里使用async函数" class="headerlink" title="在useEffect和useLayoutEffect里使用async函数"></a>在useEffect和useLayoutEffect里使用async函数</h1><p>因为async函数肯定会返回一个<code>Promise</code>，会和<code>useEffect</code>返回的cleanup函数混淆所以不要直接将<code>async function</code>传给<code>useEffect</code>，最简单的解决方法是<code>IIFE</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> fetchSomething();</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure></p><h1 id="使用useCallback时，要注意闭包问题（或者说是Capture-Value特性）"><a href="#使用useCallback时，要注意闭包问题（或者说是Capture-Value特性）" class="headerlink" title="使用useCallback时，要注意闭包问题（或者说是Capture Value特性）"></a>使用useCallback时，要注意闭包问题（或者说是Capture Value特性）</h1><p>和避免使用inline function一样，有时需要使用<code>useCallback</code>来优化性能，但是<code>useCallback</code>会返回之前的闭包，使用到的局部变量是不会更新的。<br>举个例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> increaseCount = useCallback(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  setCount(count + <span class="number">1</span>);</span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为useCallback总是返回第一次render时传入的闭包，increaseCount内访问到的count永远都是0</span></span><br><span class="line">increaseCount(); <span class="comment">// 相当于setCount(1);</span></span><br><span class="line">increaseCount(); <span class="comment">// 无论调用几次都是setCount(1);</span></span><br></pre></td></tr></table></figure></p><p>解决方法就是避免引用外部的局部变量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> vRef = useRef(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> increaseCount = useCallback(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 传入function的话每次都能拿到最新值</span></span><br><span class="line">  setCount(<span class="function"><span class="params">prevCount</span> =&gt;</span> prevCount + <span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 用一个对象来保存，适用于不需要触发更新的情况</span></span><br><span class="line">  vRef.current += <span class="number">1</span>;</span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用useReducer解决</span></span><br><span class="line"><span class="keyword">const</span> [count, increase] = useReducer(<span class="function">(<span class="params">c, increment</span>) =&gt;</span> c + increment, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> increaseCount = useCallback(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  increase(<span class="number">1</span>);</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure></p><p>但是注意不要<a href="https://github.com/ryardley/hooks-perf-issues#whats-the-difference" target="_blank" rel="noopener">这么写</a>。</p><p>关于<strong>Capture Value</strong>可以参考<a href="https://juejin.im/post/5c9827745188250ff85afe50#heading-3" target="_blank" rel="noopener">这篇文章</a>。</p><h1 id="useEffect、useCallback、useMemo等API的第二个参数数组的长度不能变"><a href="#useEffect、useCallback、useMemo等API的第二个参数数组的长度不能变" class="headerlink" title="useEffect、useCallback、useMemo等API的第二个参数数组的长度不能变"></a>useEffect、useCallback、useMemo等API的第二个参数数组的长度不能变</h1><p>有时可能会写出这样的代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [selectedStatuses, setSelected] = useState([]);</span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  fetchListById(selectedStatuses);</span><br><span class="line">&#125;, selectedStatuses);</span><br></pre></td></tr></table></figure></p><p>这里如果将<code>selectedStatuses</code>从<code>[]</code>更新为<code>[&#39;active&#39;]</code>是不会触发effect的，react也会给你一个warning。<a href="https://github.com/facebook/react/blob/f161ee2eb7e78d6cb3d3878fe1812ac1057fedc6/packages/react-reconciler/src/ReactFiberHooks.js#L290" target="_blank" rel="noopener">相关源码</a>。</p><p>这里最好将整个state作为deps的一项传入，或者使用一个key来控制<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  fetchListById(selectedStatuses);</span><br><span class="line">&#125;, [selectedStatuses]);</span><br></pre></td></tr></table></figure></p><h1 id="使用React-memo和React-forwardRef包装的组件为什么提示我children类型不对？"><a href="#使用React-memo和React-forwardRef包装的组件为什么提示我children类型不对？" class="headerlink" title="使用React.memo和React.forwardRef包装的组件为什么提示我children类型不对？"></a>使用<code>React.memo</code>和<code>React.forwardRef</code>包装的组件为什么提示我children类型不对？</h1><p>过去使用<code>Component</code>、<code>FC</code>等类型定义组件时一般不需要我们定义props里<code>children</code>的类型，因为在上述类型里已经帮你默认加上了 <code>{ children?: ReactNode }</code> 的定义。但是<code>@types/react</code>的维护者认为这样导致<code>children</code>几乎没有类型约束，组件开发者应该显式地声明<code>children</code>类型。所以对新的API应该都不会自动加上<code>children</code>的定义了，需要开发者手动添加。</p><p>详情见<a href="https://github.com/DefinitelyTyped/DefinitelyTyped/pull/33602" target="_blank" rel="noopener">讨论</a>。</p><h1 id="使用act给react-hooks写单元测试"><a href="#使用act给react-hooks写单元测试" class="headerlink" title="使用act给react hooks写单元测试"></a>使用<a href="https://reactjs.org/docs/test-utils.html#act" target="_blank" rel="noopener"><code>act</code></a>给react hooks写单元测试</h1><p><a href="mailto:react@16.8" target="_blank" rel="noopener">react@16.8</a>给test-utils新加了一个 <code>act</code> API，关于这个API可以看看作者写的这篇<a href="https://github.com/threepointone/react-act-examples" target="_blank" rel="noopener">通俗易懂的解释</a>。</p><p>这里简单总结一下<code>act</code>主要是为了解决<code>useEffect</code>的测试问题出现的，因为<code>useEffect</code>的执行时机会很晚，甚至在断言之后。如果在<code>useEffect</code>里执行了ui变更，就很难写测试了，虽然可以用<code>useLayoutEffect</code>解决，但是不能为了通过测试而修改原代码。这里用<code>act</code>就能很好地解决了，这个API能同步执行所有<code>useEffect</code>以及相应的更新，在断言时就能拿到正确的结果了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/18808/52914771-3ecb4b00-32c4-11e9-9923-c577f371a4aa.png" alt="before" title>                </div>                <div class="image-caption">before</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-images.githubusercontent.com/18808/52914772-3ecb4b00-32c4-11e9-99c4-4915af46c149.png" alt="use act" title>                </div>                <div class="image-caption">use act</div>            </figure><p>总之所有可能触发更新的代码都应该放到<code>act</code>里，不然test-utils会给一个warning。</p><p>另外<code>act</code>会batchUpdate，可能会导致一个隐藏bug，见文章中<a href="https://github.com/threepointone/react-act-examples/blob/master/sync.md#events" target="_blank" rel="noopener">这段内容</a>，需要注意一下。</p><h1 id="Function-Component与ant-design的Form"><a href="#Function-Component与ant-design的Form" class="headerlink" title="Function Component与ant design的Form"></a>Function Component与ant design的Form</h1><p>Form非常适合使用react hooks来实现，<a href="https://github.com/ant-design/ant-design/issues/10640" target="_blank" rel="noopener">官方</a>目前看来没什么进展，不过目前hoc也没什么问题。</p><p>用FC写的自定义表单控件会有ref相关的warning，因为antd form需要拿到组件的<code>ref</code>，而FC默认是没有实例的。这里我们可以通过<code>React.forwardRef</code> + <a href="https://reactjs.org/docs/hooks-reference.html#useimperativehandle" target="_blank" rel="noopener"><code>useImperativeHandle</code></a>解决，<a href="https://codesandbox.io/s/31mv8004rp" target="_blank" rel="noopener">官方示例</a>。不过这么写<code>validateFieldsAndScroll</code>这个API可能就没用了，建议把<code>ref</code>传给底层的表单元素组件。</p><hr><p>我收集了一些常用的hooks，欢迎使用和一起开发。<br><a href="https://frezc.github.io/react-hooks-common/">https://frezc.github.io/react-hooks-common/</a></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://kentcdodds.com/blog/useeffect-vs-uselayouteffect" target="_blank" rel="noopener">useEffect vs useLayoutEffect</a></li><li><a href="https://reactjs.org/docs/hooks-faq.html" target="_blank" rel="noopener">react官方文档</a></li><li><a href="https://github.com/threepointone/react-act-examples/blob/master/sync.md" target="_blank" rel="noopener">https://github.com/threepointone/react-act-examples/blob/master/sync.md</a></li><li><a href="https://github.com/facebook/react" target="_blank" rel="noopener">https://github.com/facebook/react</a></li><li><a href="https://github.com/DefinitelyTyped/DefinitelyTyped/pull/33602" target="_blank" rel="noopener">https://github.com/DefinitelyTyped/DefinitelyTyped/pull/33602</a></li><li><a href="https://ant-design.gitee.io/components/form-cn/#components-form-demo-customized-form-controls" target="_blank" rel="noopener">https://ant-design.gitee.io/components/form-cn/#components-form-demo-customized-form-controls</a></li><li><a href="https://juejin.im/post/5c9827745188250ff85afe50" target="_blank" rel="noopener">https://juejin.im/post/5c9827745188250ff85afe50</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自从 &lt;a href=&quot;mailto:react@16.8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react@16.8&lt;/a&gt; 正式发布react hooks已经有一段时间了，这段时间我也一直在项目里使用hook的方式来写组件，其间也遇到了不少问题
      
    
    </summary>
    
      <category term="develop" scheme="https://frezc.github.io/categories/develop/"/>
    
    
      <category term="react" scheme="https://frezc.github.io/tags/react/"/>
    
      <category term="react-hooks" scheme="https://frezc.github.io/tags/react-hooks/"/>
    
      <category term="test" scheme="https://frezc.github.io/tags/test/"/>
    
      <category term="ant-design" scheme="https://frezc.github.io/tags/ant-design/"/>
    
  </entry>
  
  <entry>
    <title>使用typescript实现依赖注入框架</title>
    <link href="https://frezc.github.io/2018/08/17/how-to-impletement-denpendency-injection-in-typescript/"/>
    <id>https://frezc.github.io/2018/08/17/how-to-impletement-denpendency-injection-in-typescript/</id>
    <published>2018-08-17T05:58:15.000Z</published>
    <updated>2019-04-05T07:46:16.931Z</updated>
    
    <content type="html"><![CDATA[<p>首先思考一个问题：我们为什么需要依赖注入(Dependency injection下面简称DI)？</p><p>之前用java的spring、php的laravel和angular时发现它们的模式非常相似，框架会把请求处理、线程管理、错误处理等都封装好，你只需要实现对应的横向和纵向切面，然后让框架来管理和调用你的代码，这就是设计模式中有名的<strong>控制反转</strong>(简称IOC)。</p><p>而DI是IOC的一种比较通用的实现方式，举个例子我们的web服务中有controller（接口层）和service（业务逻辑层），我们需要在controller中调用service的代码，但是service一般会有<strong>上下文(context)</strong>（比如使用了当前的请求对象、数据库连接、全局参数等）。如果我们每次在调用service时都要手动给它这么多参数实在太麻烦了，而且代码会很耦合。此时DI就能解决这个问题了，我们只需要声明需要的对象，框架就能自动创建好带有<strong>上下文</strong>对象。那么下面我们来看看怎么用ts实现一个简单的依赖注入框架。</p><hr><p><em>下文写的时候我还没有使用过nodejs写过复杂的后端服务，所以造了个简单的轮子来梳理项目代码，使用的hapijs社区也不太活跃，所以本文仅适合作为参考和学习使用。要使用nodejs开发大型应用的话建议使用<a href="https://github.com/nestjs/nest" target="_blank" rel="noopener">nest.js</a>或者<a href="https://github.com/eggjs/egg/" target="_blank" rel="noopener">eggjs</a>。</em></p><h1 id="核心API"><a href="#核心API" class="headerlink" title="核心API"></a>核心API</h1><p>先看看实现的API长什么样<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Knex <span class="keyword">from</span> <span class="string">'knex'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; autowired, impl, context &#125; <span class="keyword">from</span> <span class="string">'../injection'</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> MyController &#123;</span><br><span class="line">  <span class="meta">@autowired</span> userRepository: IUserRepository;</span><br><span class="line">  </span><br><span class="line">  getUsers() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.userRepository.getAllExistUsers();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 这里用抽象类来表示接口（下面会通称为“接口”）</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> IUserRepository &#123;</span><br><span class="line">  <span class="keyword">abstract</span> getAllExistUsers(): PromiseLike&lt;IUser[]&gt;;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="meta">@impl</span>(IUserRepository)</span><br><span class="line"><span class="keyword">class</span> UserRepositoryImpl <span class="keyword">extends</span> IUserRepository &#123;</span><br><span class="line">  <span class="meta">@context</span>(<span class="string">'knex'</span>) knex: Knex;</span><br><span class="line">  </span><br><span class="line">  getAllExistUsers() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.knex(<span class="string">'users'</span>).select().where(<span class="string">'deleted'</span>, <span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里的API设计稍微参考了下spring，还有一些妥协设计（比如为什么要用<code>abstract class</code>而不用<code>interface</code>、为什么 <code>@impl</code> 需要传入对应接口），这些下面会解释。</p><h2 id="API实现原理"><a href="#API实现原理" class="headerlink" title="API实现原理"></a>API实现原理</h2><p>这里虽然实现了3个<a href="https://www.typescriptlang.org/docs/handbook/decorators.html" target="_blank" rel="noopener"><code>decorator</code></a>，但是这些<code>decorator</code>的作用其实和java里的<code>annotation</code>一样 —— 定义metadata，所以实现上很简单，基本上都是一句话就能讲清楚里面的逻辑：</p><ul><li><code>@autowired</code> (需要自动注入的变量)：把当前的property key（<code>&#39;userRepository&#39;</code>）以及对应的type（<code>IUserRepository</code>）存到当前类的<code>metadata</code>中，方便后面注入的时候传入。</li><li><code>@impl</code> (实现某个接口的类)：将当前的接口和类保存到一个全局Map&lt;接口, 实现&gt;。</li><li><code>@context</code>（需要注入当前应用上下文的变量）：将当前key（<code>&#39;knex&#39;</code>）与需要注入的context key（<code>&#39;knex&#39;</code>）保存到当前类的<code>metadata</code></li></ul><p>下面是autowired的实现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> metaKey = Symbol(<span class="string">'autowiredKeys'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> IAutowiredKey &#123;</span><br><span class="line">  <span class="comment">// 字段名</span></span><br><span class="line">  key: <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">// 对应类型，通过metadata返回的类型必定是Object与其子类</span></span><br><span class="line">  <span class="keyword">type</span>: <span class="built_in">Function</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">autowired</span>(<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> autowiredKeys = getAutowiredKeys(target);</span><br><span class="line">  <span class="comment">// 得到当前装饰成员变量的类型</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">type</span> = Reflect.getMetadata(<span class="string">'design:type'</span>, target, propertyKey);</span><br><span class="line">  autowiredKeys.push(&#123; key: propertyKey, <span class="keyword">type</span> &#125;);</span><br><span class="line">  <span class="comment">// 将变量保存到当前类的metadata里</span></span><br><span class="line">  Reflect.defineMetadata(metaKey, autowiredKeys, target);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拿到在当前类上定义的需要自动注入的key和type</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getAutowiredKeys</span>(<span class="params">target: <span class="built_in">any</span></span>): <span class="title">IAutowiredKey</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Reflect.getMetadata(metaKey, target) || [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Typescript-metadata"><a href="#Typescript-metadata" class="headerlink" title="Typescript metadata"></a>Typescript metadata</h2><p>typescript可以通过<code>metadata</code>拿到3种类型信息</p><ul><li>对象上的成员变量类型</li><li>函数的参数类型</li><li>函数的返回类型</li></ul><p>但是又有非常大的限制，可以看一下<a href="http://blog.wolksoftware.com/decorators-metadata-reflection-in-typescript-from-novice-to-expert-part-4#3-basic-type-serialization_1" target="_blank" rel="noopener">这一节文章</a>，简单来说就是拿不到 <code>interface</code> 的类型，而 <code>abstract class</code> 可以，所以使用中需要用 <code>abstract class</code> 来代替 <code>interface</code> 。</p><p>另外关于 <code>@impl</code> 为什么要传入对应接口，主要是因为如果不传入接口的话，在注入<code>@autowired</code>变量时，我必须要遍历被<code>@impl</code>装饰的类来判断其是否是该变量类型的本身或者子类。</p><p>这里可能会出现一个问题，如果<code>@autowired</code>的变量类型是<code>interface</code>啥的话，由于上面提到的限制我只能拿到 <code>Object</code> 这个类型，由于所有类都是其子类，所以就会注入错误的类型了。</p><h2 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h2><p>关于<code>@autowired</code>字段的注入实现非常简单，实现以下几步就行了：</p><ol><li>拿到对象需要注入的字段及其类型</li><li>根据类型判断并创建需要注入的对象</li><li>递归注入上一步生成的对象，并注入上下文</li><li>将生成的对象传给成员变量</li></ol><h1 id="路由设计"><a href="#路由设计" class="headerlink" title="路由设计"></a>路由设计</h1><p>路由层参考<a href="https://laravel.com/docs/5.6/routing" target="_blank" rel="noopener">laravel</a>框架，因为我个人认为将路由放在一个地方同一管理比spring那种分散到<code>Controller</code>上定义要方便索引（<code>api -&gt; controller</code>）。</p><p>提供的API如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Route &#125; <span class="keyword">from</span> <span class="string">'../injection'</span>;</span><br><span class="line"><span class="keyword">const</span> route = <span class="keyword">new</span> Route();</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 设置放置controllers的目录，默认是 $&#123;work directory&#125;/controllers</span></span><br><span class="line">route.setControllersRoot(<span class="string">'server/controllers'</span>);</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 指定Controller的method作为handler</span></span><br><span class="line">route.post(<span class="string">'/apples/&#123;id&#125;'</span>, <span class="string">'SampleController@updateApple'</span>);</span><br><span class="line">route.get(<span class="string">'/users'</span>, <span class="string">'SampleController@getUsers'</span>);</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 直接传入函数作为hanlder</span></span><br><span class="line">route.match([<span class="string">'get'</span>, <span class="string">'post'</span>], <span class="string">'/healthz'</span>, <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">'ok'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// prefix</span></span><br><span class="line">route.prefix(<span class="string">'admin'</span>).group(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">  r.post(<span class="string">'users/&#123;id&#125;/ban'</span>, <span class="string">'AdminController@banUser'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> route;</span><br></pre></td></tr></table></figure><p>这里除了将 <code>Controller</code> 引入并绑定到对应的 <code>path</code> 上外，还要检测对应的方法是否<strong>存在</strong>，这样就能将错误放在程序<strong>启动</strong>时而不是<strong>运行</strong>时抛出了。</p><h1 id="接口层的IO"><a href="#接口层的IO" class="headerlink" title="接口层的IO"></a>接口层的IO</h1><p>目前设计的API如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// controller内</span></span><br><span class="line"><span class="keyword">class</span> MyController &#123;</span><br><span class="line">  getUsers(<span class="meta">@param</span> id: <span class="built_in">number</span>, <span class="meta">@query</span> detail: <span class="built_in">boolean</span> = <span class="literal">false</span>, <span class="meta">@payload</span> body: <span class="built_in">Object</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      users: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  getUser(<span class="meta">@query</span>(<span class="string">'name'</span>) userName: <span class="built_in">string</span>, request: Hapi.Request, h: Hapi.ResponseToolkit) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      users: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 直接传入路由的函数</span></span><br><span class="line">route.get(<span class="string">'welcome/&#123;name&#125;'</span>, <span class="function">(<span class="params">name: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    message: <span class="string">`welcome <span class="subst">$&#123;name&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里有3个<code>decorator</code>，分别代表 路径参数（<code>@param</code>）、查询参数（<code>@query</code>）、和请求体（<code>@payload</code>），作用同样是设置<code>metadata</code>。另外有一些框架特定类型的参数（<code>Hapi.Request</code>和<code>Hapi.ResponseToolkit</code>），是为了支持更加特殊的需求。</p><p>对于直接传入路由的函数，我对其的定位是“不需要复杂输入的简单逻辑”，所以只会把路径参数的指根据顺序传进去。</p><p>注入数据时需要考虑参数类型，我这里定了几个规则：</p><ul><li>如果类型是 <code>string</code>、<code>number</code>、<code>boolean</code>，那么需要将数据转为对应的基础类型</li><li>如果类型是一些特定类型，比如<code>Hapi.Request</code>，那么由对应框架的bind来判断注入</li><li>如果类型是 <code>Object</code>（可能是object、interface等），那么将数据原样返回</li><li>如果类型是 <code>Function</code>（class），分为以下的情况<ul><li>先new对应的类，如果注入的数据不是基础类型，并且对应的class的构建函数没有参数，那么将注入数据<code>Object.assign</code>给新建对象</li><li>如果对应的class的构建函数有参数，或注入的数据是基础类型，那么将注入数据传入class的构建函数</li></ul></li></ul><p>返回类型和异常处理都是目前是由<code>Hapi.js</code>自己处理的，还没研究过<code>express</code>这些库的处理方式，不过应当遵循下面的规则：</p><ul><li>返回类型应当支持所有能JSON序列化的值和<code>Promise</code>。</li><li>抛出异常应当可以直接<code>throw</code>，并有一个统一处理方法</li></ul><h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><p>因为对于依赖注入的API来说<code>controllers</code>、<code>services</code>和<code>repositories</code>都是一样的，所以项目结构其实可以由自己的项目情况决定，不过建议分为以下几个层面：</p><ul><li><code>controllers</code>: 负责接口IO处理，表单验证，流程控制</li><li><code>services</code>: 负责业务模块逻辑</li><li><code>repositories</code>: DAO层，负责与数据库打交道</li><li><code>models</code>: 数据模型</li><li><code>routes.ts</code>: 定义路由</li><li><code>app.ts</code>: 项目的启动、配置</li></ul><h1 id="绑定Hapi-js"><a href="#绑定Hapi-js" class="headerlink" title="绑定Hapi.js"></a>绑定Hapi.js</h1><p>目前在项目里用到的service端实现是<code>hapi.js</code>，所以讲讲injection与<code>hapi.js</code>的bind需要实现的功能：</p><ul><li>根据路由配置生成hapi的路由配置</li><li>在handler里注入所有的接口依赖、上下文依赖以及方法的参数依赖</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; injectAutowired, injectContext, callHanlderWithInjection &#125; <span class="keyword">from</span> <span class="string">'../injection'</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 生成Hapi route handler的函数</span></span><br><span class="line">createControllerHandler&lt;T <span class="keyword">extends</span> classType&gt;(Controller: T, methodName: <span class="built_in">string</span>, context: &#123; [key: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125;) &#123;</span><br><span class="line">  <span class="keyword">return</span> (request: Hapi.Request, h: Hapi.ResponseToolkit, err?: <span class="built_in">Error</span>): Hapi.Lifecycle.ReturnValue =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> c: <span class="built_in">any</span> = <span class="keyword">new</span> Controller(context);</span><br><span class="line">    injectAutowired(c, context);</span><br><span class="line">    injectContext(c, context);</span><br><span class="line">    <span class="keyword">return</span> callHanlderWithInjection(c, methodName, request);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h1><ul><li>路由层的权限控制</li><li>更加通用的参数验证</li><li>更加通用的错误处理</li><li>更加通用的Request与Resposne结构</li><li>DAO层使用ORM</li><li>实现Laravel里的Facades模式？</li><li>利用typescript的compiler解决上面的局限问题</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先思考一个问题：我们为什么需要依赖注入(Dependency injection下面简称DI)？&lt;/p&gt;
&lt;p&gt;之前用java的spring、php的laravel和angular时发现它们的模式非常相似，框架会把请求处理、线程管理、错误处理等都封装好，你只需要实现对应的
      
    
    </summary>
    
      <category term="develop" scheme="https://frezc.github.io/categories/develop/"/>
    
    
      <category term="typescript" scheme="https://frezc.github.io/tags/typescript/"/>
    
      <category term="web service" scheme="https://frezc.github.io/tags/web-service/"/>
    
  </entry>
  
  <entry>
    <title>如何修复错误的merge提交</title>
    <link href="https://frezc.github.io/2018/04/30/how-to-fix-wrong-merge/"/>
    <id>https://frezc.github.io/2018/04/30/how-to-fix-wrong-merge/</id>
    <published>2018-04-30T15:39:49.000Z</published>
    <updated>2019-03-22T13:56:32.906Z</updated>
    
    <content type="html"><![CDATA[<p>因为最近帮别人解决了一次git merge丢代码的情况，当时处理地简单粗暴，reset到merge前一次commit后重来一遍。后来又设想了一下，如果merge后又commit很多次，这样岂不会很麻烦？如果这个分支不允许force push，那这样做也不行。于是就去查了一些资料，自己尝试并总结了一下几个方法。</p><hr><h1 id="用git-reset重新来过"><a href="#用git-reset重新来过" class="headerlink" title="用git reset重新来过"></a>用git reset重新来过</h1><p>这种方法很简单，就是<code>git reset</code>到merge之前的一次commit，然后重新merge，然后如果之前在merge之后还有commit的话利用<code>git cherry-pick &lt;commit start&gt;^...&lt;commit end&gt;</code>apply到当前分支。最后<code>git push --force</code>到远端分支（如果之前已经push了的话）</p><p>这种方法适合你在push之前就发现了错误的情况，因为用了<code>git reset</code>后当前分支就必须要<strong>force push</strong>了。</p><p>force push有什么问题？<br>一般来说不应该在非私人分支上force push，因为这有可能会覆盖掉其他人在该分支上的commit。而且远端的protected branch是不能直接force push的。</p><h1 id="更好的方法？"><a href="#更好的方法？" class="headerlink" title="更好的方法？"></a>更好的方法？</h1><p>首先解决第一个问题，如何不用force push？</p><p>如果我们不修改要push分支的历史的话是不需要force push的，那么很简单了，只要把需要修改历史的reset操作在另外一个不需要push的分支上操作就行了。</p><p>实际操作就是从当前分支拉一条新分支出来，然后进行上面reset的方法，最后再rebase或merge回当前分支。</p><p>既然这里也提到了rebase，其实我们还可以简化一下上面的方法。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设我们这里merge feature到master</span></span><br><span class="line"><span class="comment"># 使用第一种方法</span></span><br><span class="line">git checkout -b fix-merge</span><br><span class="line">git reset &lt;commit before merge&gt; --hard</span><br><span class="line">git merge feature <span class="comment"># fix conflict</span></span><br><span class="line">git cherry-pick &lt;commit start&gt;^...&lt;commit end&gt; <span class="comment"># maybe need fix conflict</span></span><br><span class="line">git checkout master</span><br><span class="line">git merge fix-merge <span class="comment"># fix conflict</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用rebase简化一下，因为rebase也是一个会修改历史的操作，所以还是需要新开分支</span></span><br><span class="line">git checkout -b fix-merge</span><br><span class="line"><span class="comment"># 用rebase代替了reset &gt; merge &gt; cherry-pick的操作</span></span><br><span class="line">git rebase -i &lt;commit before merge&gt; <span class="comment"># fix conflict</span></span><br><span class="line">git checkout master</span><br><span class="line">git merge fix-merge <span class="comment"># fix conflict</span></span><br></pre></td></tr></table></figure><p>这里在rebase时添加了<code>-i</code>的参数，可以清楚地展示和操作每次会应用的commit。如果不懂rebase可以看看<a href="https://git-scm.com/docs/git-rebase" target="_blank" rel="noopener">官方文档</a>。</p><h1 id="用上面的方法要处理的冲突太多了怎么办？"><a href="#用上面的方法要处理的冲突太多了怎么办？" class="headerlink" title="用上面的方法要处理的冲突太多了怎么办？"></a>用上面的方法要处理的冲突太多了怎么办？</h1><p>无论是cherry-pick还是rebase都是将commit一次次给apply，所以merge之后的commit如果有冲突，那也得一次次解决，有时候一直要改同一个文件的话，那解决冲突就是很痛苦的一件事了。</p><p>这里有两个方案可以考虑一下：</p><ol><li><p>其实在第一种方法中完全没必要用cherry-pick，新分支在重新merge后可以直接merge到当前分支的。当然这样还是一样要处理很多冲突，只不过可以一次处理完了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b fix-merge</span><br><span class="line">git reset &lt;commit before merge&gt; --hard</span><br><span class="line">git merge feature <span class="comment"># fix conflict</span></span><br><span class="line">git checkout master</span><br><span class="line">git merge fix-merge <span class="comment"># fix large conflict</span></span><br></pre></td></tr></table></figure></li><li><p>如果是丢了代码并知道丢的是哪次提交的代码，那么可以直接<code>git cherry-pick &lt;commit id&gt;</code>。</p></li><li><p>直接改代码。</p></li></ol><h1 id="git-revert可以解决问题吗？"><a href="#git-revert可以解决问题吗？" class="headerlink" title="git revert可以解决问题吗？"></a>git revert可以解决问题吗？</h1><p>我在网上也看到很多用<code>git revert</code>来解决错误merge的方法，但是这样做只能<strong>撤销merge</strong>而无法去<strong>修复merge</strong>，而且就算提交了revert commit，当前分支也不能重新merge，因为revert只是普通的commit而不能改变已经存在的merge commit。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为最近帮别人解决了一次git merge丢代码的情况，当时处理地简单粗暴，reset到merge前一次commit后重来一遍。后来又设想了一下，如果merge后又commit很多次，这样岂不会很麻烦？如果这个分支不允许force push，那这样做也不行。于是就去查了一些
      
    
    </summary>
    
      <category term="develop" scheme="https://frezc.github.io/categories/develop/"/>
    
    
      <category term="git" scheme="https://frezc.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>这个博客不会再更新了</title>
    <link href="https://frezc.github.io/2017/12/16/%E8%BF%99%E4%B8%AA%E5%8D%9A%E5%AE%A2%E4%B8%8D%E4%BC%9A%E5%86%8D%E6%9B%B4%E6%96%B0%E4%BA%86/"/>
    <id>https://frezc.github.io/2017/12/16/这个博客不会再更新了/</id>
    <published>2017-12-16T11:18:38.000Z</published>
    <updated>2019-03-22T13:34:47.316Z</updated>
    
    <content type="html"><![CDATA[<p>本来打算就用<a href="https://github.com/Frezc/Blog/issues" target="_blank" rel="noopener">issue</a>写文章了，但是写了一点后发现github上还是太严肃了，不太好瞎扯些非技术性地东西，所以还是换回hexo写了。。</p><p>这次花了点时间把typecho上的文章都迁了，有点心思想把动漫排行捡起来，不过匹配关联这块要自动化确实不太好做，手工的话一个人没什么精力。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本来打算就用&lt;a href=&quot;https://github.com/Frezc/Blog/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;issue&lt;/a&gt;写文章了，但是写了一点后发现github上还是太严肃了，不太好瞎扯些非技术性地东西，所以
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack和webpack-dev-server的配置备忘</title>
    <link href="https://frezc.github.io/2016/08/06/webpack%E5%92%8Cwebpack-dev-server%E7%9A%84%E9%85%8D%E7%BD%AE%E5%A4%87%E5%BF%98/"/>
    <id>https://frezc.github.io/2016/08/06/webpack和webpack-dev-server的配置备忘/</id>
    <published>2016-08-06T14:17:00.000Z</published>
    <updated>2019-03-21T13:48:42.047Z</updated>
    
    <content type="html"><![CDATA[<p>自从上次用webpack写web应用感觉已经过了一段时间了，这次重新拾起又花了不少时间。</p><p>为了下次能更快地使用webpack开发，决定写篇文章把配置的问题记录下来。</p><a id="more"></a><h3 id="webpack基本配置"><a href="#webpack基本配置" class="headerlink" title="webpack基本配置"></a>webpack基本配置</h3><ul><li><p>devtool: 在开发中可以使用<code>&#39;eval&#39;</code>(打包速度快)、<code>&#39;inline-source-map&#39;</code>(打包速度慢，但在浏览器里能直接查看编译前的代码)等值；生成环境中不要设置或设为<code>false</code></p></li><li><p>entry: 结构可以是</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">    app: APP_DIR + <span class="string">'/app.js'</span>,</span><br><span class="line">    vendor: APP_DIR + <span class="string">'/scripts/vendor.js'</span>,</span><br><span class="line">    login: [</span><br><span class="line">        APP_DIR + <span class="string">'/login.js'</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>output: 注意下<code>publicPath</code>，要设置为打包后资源的url路径</p></li><li><p>module: 注意下scss的loaders的写法</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开发中</span></span><br><span class="line">loaders: [<span class="string">'style'</span>, <span class="string">'css'</span>, <span class="string">'postcss'</span>, <span class="string">'sass'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成环境 导出到一个css文件</span></span><br><span class="line">loader: ExtractTextPlugin.extract(<span class="string">'style'</span>, [<span class="string">'css'</span>, <span class="string">'postcss'</span>, <span class="string">'sass'</span>])</span><br></pre></td></tr></table></figure></li><li><p>resolve: 可以用<code>extensions</code>来指定<code>import</code>时可以省略的后缀名；可以用<code>alias</code>指定从非npm引入的库，如<code>jquery: path.resolve(__dirname, &#39;./bower_components/jquery/dist/jquery.js&#39;)</code>，这样在<code>import</code>时可以替换引用路径</p></li><li><p>externals: 指定从全局引入的库，如<code>jquery: &quot;jQuery&quot;</code>，这样在<code>require(&#39;jquery&#39;)</code>时会引入<code>jQuery</code>对象</p></li></ul><h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><ul><li><p>ProvidePlugin: 定义一些在import时能自动引入的变量，如定义了<code>$: &#39;jquery&#39;</code>后，可以在文件中直接使用$，webpack可以自动帮你加上<code>var $ = require(&#39;jquery&#39;)</code></p></li><li><p>CommonsChunkPlugin: 将多个entry里的公共模块提取出来放到一个文件里，这个插件可以用来将库和自己代码分离</p></li><li><p>DllPlugin: 将一些模块预编译，类似windows里的dll，可以在项目中直接使用，无需再构建。注意要在output中指定<code>library</code>，并在DllPlugin中指定与其一致的<code>name</code>，在有多个入口时可以使用<code>[name]</code>和<code>[hash]</code>来区分，因为这个参数是要赋值到global上的，所以这里使用<code>[hash]</code>不容易出现变量名冲突的情况</p></li><li><p>DllReferencePlugin: 引用之前打包好的dll文件，注意下context参数，这个应该根据manifest.json文件中的引用情况来赋值，如果引用的都是npm安装的库，这里就填项目根目录就好了</p></li><li><p>NoErrorsPlugin: 在打包时不会因为错误而中断</p></li><li><p>DefinePlugin: 可以定义编译时的全局变量，有很多库（React, Vue等）会根据<code>NODE_ENV</code>这个变量来判断当前环境。为了尽可能减少包大小，在生产环境中要定义其为<code>JSON.stringify(&quot;production&quot;)</code></p></li><li><p>optimize.UglifyJsPlugin: 配置压缩代码，如</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">compress: &#123;</span><br><span class="line">    unused: <span class="literal">true</span>,</span><br><span class="line">    dead_code: <span class="literal">true</span>,</span><br><span class="line">    warnings: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>optimize.OccurrenceOrderPlugin: 可以减少文件大小</p></li><li><p>optimize.DedupePlugin: 可以减少重复文件数</p></li><li><p>ExtractTextPlugin: 可以将所有css文件打包到一个css文件中，配置见loader</p></li></ul><h3 id="webpack-dev-server和react-hot-loader的相关配置"><a href="#webpack-dev-server和react-hot-loader的相关配置" class="headerlink" title="webpack-dev-server和react-hot-loader的相关配置"></a>webpack-dev-server和react-hot-loader的相关配置</h3><p>如果只进行客户端开发，不适用nodejs渲染的话，推荐安装webpack-dev-server CLI，可以省去很多配置。</p><p>首先看看cli里常用的几项配置：</p><ul><li><p>–port=8080：这项指定了服务器端口，相当于在entry中加上<code>webpack-dev-server/client?http://0.0.0.0:8080</code>，前者是后者的简便用法，注意这两个不要重复。</p></li><li><p>–hot：开启热替换功能。如果要使用react-hot-loader，这项是必须要开启的；如果只是想在更新代码后自动刷新页面，则不需要。这项等同于在<code>plugins</code>中添加<code>new webpack.HotModuleReplacementPlugin()</code>，同样注意不要重复。</p></li><li><p>–inline：这个的功能是为了能在你自己的测试服务器上获取的html页面中获取webpack-dev-server动态生成的js文件，基本上如果要用webpack-dev-server这个是必要的。详情说明见<a href="http://webpack.github.io/docs/webpack-dev-server.html#combining-with-an-existing-server" target="_blank" rel="noopener">文档</a>。这个参数会在entry里加上<code>webpack/hot/dev-server</code>，注意不要重复了。<br> 虽然加了这项就能变更后自动刷新页面了，但是要用hmr还有几点要注意：</p><ol><li>output.publicPath一定要使用完整的url，如<code>&quot;http://localhost:8080/dist/&quot;</code>，端口要和wds相同，不然会出现跨域的错误提醒。</li><li>在html页面中当然也要以完整的url来引入。</li></ol></li></ul><p>如果要写同构应用的话，使用<a href="https://github.com/glenjamin/webpack-hot-middleware" target="_blank" rel="noopener">webpack-hot-middleware</a>并按照文档的写法就可以了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从上次用webpack写web应用感觉已经过了一段时间了，这次重新拾起又花了不少时间。&lt;/p&gt;
&lt;p&gt;为了下次能更快地使用webpack开发，决定写篇文章把配置的问题记录下来。&lt;/p&gt;
    
    </summary>
    
      <category term="develop" scheme="https://frezc.github.io/categories/develop/"/>
    
    
      <category term="webpack" scheme="https://frezc.github.io/tags/webpack/"/>
    
      <category term="webpack-dev-server" scheme="https://frezc.github.io/tags/webpack-dev-server/"/>
    
  </entry>
  
  <entry>
    <title>给RN的app添加widgets</title>
    <link href="https://frezc.github.io/2016/06/26/%E7%BB%99RN%E7%9A%84app%E6%B7%BB%E5%8A%A0widgets/"/>
    <id>https://frezc.github.io/2016/06/26/给RN的app添加widgets/</id>
    <published>2016-06-25T18:12:00.000Z</published>
    <updated>2019-03-21T13:48:42.050Z</updated>
    
    <content type="html"><![CDATA[<p>widgets应该是android平台上最有用的特性之一了吧，将应用的数据利用一个小视图嵌入其他应用（如桌面），可以快速地获得app的状态而不用启动app。</p><p>最近用react-native写了一个<a href="https://github.com/Frezc/TodoLite" target="_blank" rel="noopener">todo app</a>，感觉将计划利用widgets直接在桌面上展现出来会十分的方便，于是就给这个app加了widgets。<br>当然rn没有给我们提供这方面的支持，毕竟是android端的东西，只能直接写原生了。虽然很久没写过原生android了，但是看看文档还是没有问题的。</p><a id="more"></a><h3 id="appwidgets基础"><a href="#appwidgets基础" class="headerlink" title="appwidgets基础"></a>appwidgets基础</h3><p>首先可以看看<a href="https://developer.android.com/guide/topics/appwidgets/index.html" target="_blank" rel="noopener">官方文档</a>吧，虽然它里面讲的东西在Android studio上点击New-&gt;Widget-&gt;App widget就能帮你生成好，不过看看文档了解下配置参数和AppWidgetProvider的原理还是不错的。</p><p>由于我这里要用到ListView，还是要按照文档的内容进行一下修改，主要就下面的5个文件（还要在AndroidManifest.xml注册接收者和服务）：</p><ul><li>TodoWidget: AppWidgetProvider的子类，用来生成和更新根view。</li><li>TodoWidgetService: 用来生成ListView中每项视图的服务</li><li>todo_widget.xml: 每项视图的layout文件</li><li>todos_widget.xml: 根视图的layout文件</li><li>todo_widget_info.xml: 配置文件</li></ul><p>这些按照文档里的写就可以了，不过有点需要注意的是如果你选了最小宽度为4格，minWidth会给你填上250dp，实际在android上运行的时候这个widget的最小宽度是3格。我去github上看到一个开源app里appwidiget的<a href="https://github.com/benniaobuguai/opencdk-appwidget/blob/master/app/src/main/res/xml/widget_xml_news.xml" target="_blank" rel="noopener">配置文件</a>里看到4格写的是294dp，试了下这个数值没什么问题就直接用了。</p><h3 id="appwidgets里得到app的数据"><a href="#appwidgets里得到app的数据" class="headerlink" title="appwidgets里得到app的数据"></a>appwidgets里得到app的数据</h3><p>appwidgets里使用的数据最好是持久化的，如果你想让widgets自动更新的话（widgets默认会有一个更新周期）。RN里提供了持久化api-AsyncStorage，那么原生app中怎么从中得到数据呢？</p><p>看看AsyncStorage的源码里的这条语句<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use RocksDB if available, then SQLite, then file storage.</span></span><br><span class="line"><span class="keyword">var</span> RCTAsyncStorage = RCTAsyncRocksDBStorage || RCTAsyncSQLiteStorage || RCTAsyncFileStorage;</span><br></pre></td></tr></table></figure></p><p>可见一般情况下在android平台上是通过SQLite进行存取的。<br>另外在源码的<code>/ReactAndroid/src/main/java/com/facebook/react/modules/storage/ReactDatabaseSupplier.java</code>中我们可以得到数据库名、表名和表中每列的名称。实际上AsyncStorage只是将k-v值直接保存在一张表里而已。<br>那么从数据库中读取数据应该是很简单了，只要在每次更新时进行读取就行了，也就是在<code>RemoteViewsFactory</code>的<code>onCreate</code>和<code>onDataSetChanged</code>中读取。（ps：你当然可以通过网络请求来获取数据，rn使用了okhttp+fresco，你可以在app中直接使用这两个库）</p><p>由于我们在rn中保存时一般是转成json字符串的，所以读取后还需要解析成对象才能使用，这里用一个你会熟悉的解析库就行了。（RN自带了一个jackson-core库，不过这个用起来不是那么方便，你可以再引入jackson-databind就会好用很多了）</p><p>另外有一点要注意的是，app在没有保存任何东西的情况下，AsyncStorage对应的表是不会创建的，这时候直接读取这张表肯定会报错。<br><strong>解决方案</strong>：捕获一下异常即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">queryFromDB</span><span class="params">(SQLiteDatabase db, String key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// try-with-resource need min-api 19</span></span><br><span class="line">    Cursor c = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        c = db.rawQuery(<span class="string">"select * from "</span> + TABLE_CATALYST + <span class="string">" where "</span> + KEY_COLUMN + <span class="string">" = ?"</span>, <span class="keyword">new</span> String[]&#123;key&#125;);</span><br><span class="line">        <span class="keyword">if</span> (c.getCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            c.moveToFirst();</span><br><span class="line">            String result = c.getString(c.getColumnIndex(VALUE_COLUMN));</span><br><span class="line">            c.close();</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLiteException ignored) &#123;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (c != <span class="keyword">null</span>) c.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="app响应点击事件"><a href="#app响应点击事件" class="headerlink" title="app响应点击事件"></a>app响应点击事件</h3><p>设置点击事件的PendingIntent就按照文档的写法就可以了，如果要在rn中得到点击传递的参数的话，还要写一个原生模块来获取当前Activity的Intent对象并去除数据。</p><p>这个部分可以参考<a href="https://github.com/Neson/react-native-system-notification" target="_blank" rel="noopener">react-native-system-notification</a>这个开源库里的写法，不过在点击时app是不会再前台运行的（目前来说是这样的），所以点击后只要startActivity并在Intent中带上<code>FLAG_ACTIVITY_CLEAR_TOP</code>这个flag就行了。然后在rn中通过原生模块获得Intent中带的数据。</p><p>具体完成的样子就是这样了<br><img src="/images/2016/06/2195390602.png" alt="todolite_widget.png"></p><p>点击后的跳转<br><img src="/images/2016/06/4092440308.jpg" alt="todolite_widget_click.jpg"></p><h3 id="8-1更新-关于RemoteViews的一个BUG"><a href="#8-1更新-关于RemoteViews的一个BUG" class="headerlink" title="[8.1更新] 关于RemoteViews的一个BUG ?"></a>[8.1更新] 关于RemoteViews的一个BUG ?</h3><p>之前发现在appwidgets里如果description没有数据会显示<code>&quot;No description.&quot;</code>，第一次滚动下来时会显示正确的结果，不过重新滚回去再滚下来显示就会出现异常。</p><p>Debug半天发现取得和生成的字符串没问题后，仔细观察了下异常数据，发现异常的数据似乎是前面项遗留的数据。我之前只是简单地判断了下有description时更新到视图中，于是我再加了条在没有description把显示值设置为<code>&quot;No description.&quot;</code>，发现就没问题了。看起来是由于RemoteViews重用而导致的BUG，还真是个坑啊。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;widgets应该是android平台上最有用的特性之一了吧，将应用的数据利用一个小视图嵌入其他应用（如桌面），可以快速地获得app的状态而不用启动app。&lt;/p&gt;
&lt;p&gt;最近用react-native写了一个&lt;a href=&quot;https://github.com/Frezc/TodoLite&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;todo app&lt;/a&gt;，感觉将计划利用widgets直接在桌面上展现出来会十分的方便，于是就给这个app加了widgets。&lt;br&gt;当然rn没有给我们提供这方面的支持，毕竟是android端的东西，只能直接写原生了。虽然很久没写过原生android了，但是看看文档还是没有问题的。&lt;/p&gt;
    
    </summary>
    
      <category term="develop" scheme="https://frezc.github.io/categories/develop/"/>
    
    
      <category term="android" scheme="https://frezc.github.io/tags/android/"/>
    
      <category term="react native" scheme="https://frezc.github.io/tags/react-native/"/>
    
      <category term="widgets" scheme="https://frezc.github.io/tags/widgets/"/>
    
  </entry>
  
  <entry>
    <title>React的渲染性能优化</title>
    <link href="https://frezc.github.io/2016/04/25/React%E7%9A%84%E6%B8%B2%E6%9F%93%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>https://frezc.github.io/2016/04/25/React的渲染性能优化/</id>
    <published>2016-04-24T17:20:00.000Z</published>
    <updated>2019-03-21T13:48:42.025Z</updated>
    
    <content type="html"><![CDATA[<p>都说网页的性能瓶颈在DOM操作，所以目前的主流前端框架（React、 Vue、AngularJs等）都在极力地减少DOM操作。</p><p>就React而言，使用Virtual DOM和一个diff算法（实际就是使用一个uid来判断）来尽可能的重用现有的DOM，以此来减少DOM操作（毕竟添加比更新要耗时）。</p><p>但是在一些需要高帧数刷新的组件里，即使是Virtual DOM的re-render也会显得十分耗时，那么我们看看怎么进行优化。</p><a id="more"></a><h2 id="渲染速度问题"><a href="#渲染速度问题" class="headerlink" title="渲染速度问题"></a>渲染速度问题</h2><p>比如需要实现这么一个列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;Indicator</span><br><span class="line">    percent=&#123;this.state.percent&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">  &#123;</span><br><span class="line">    this.state.items.map(item =&gt; </span><br><span class="line">      &lt;Item</span><br><span class="line">        item=&#123;item&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>这个组件我们需要监听<code>scroll</code>事件，在处理函数里更新state中的percent属性。<br>默认React不会进行任何优化处理，就这么写的话会发现在滚动页面时会有卡顿感，我用自己项目的一个列表项测试了一下（<a href="https://github.com/Frezc/Share-Favors-App/blob/master/src/components/RepoAbList.js" target="_blank" rel="noopener">RepoAbList.js</a>），打印了scroll开始、结束和render开始的时间，如下。<br><img src="/images/2016/04/4058937871.png" alt="scroll-update-all.png"></p><p>下面是滚动时不进行render的情况<br><img src="/images/2016/04/1059717184.png" alt="scroll-no-update.png"></p><p>可以发现正常情况scroll回调的间隔是16、17ms，如果render的时间超过这个值就会影响到scroll的刷新率。虽然react更新dom是异步进行的，但是对Virtual DOM的渲染时同步的。所以这里scroll也得等render结束才能继续。</p><p>那么就必须去优化一下Virtual DOM的渲染速度了。这里我们可以打印一下列表项中的每个<code>Item</code>的render时间，就能发现虽然每项都只用了1、2毫秒来渲染，但是加起来就不少了。</p><h2 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h2><p>React也有给出<a href="https://facebook.github.io/react/docs/component-specs.html#updating-shouldcomponentupdate" target="_blank" rel="noopener">解决方案</a>，<code>shouldComponentUpdate</code>在默认情况下是返回<code>true</code>的，也就是说只要<code>props</code>或<code>state</code>改变，这个组件就会更新，同样子组件由于<code>props</code>的改变也会更新，具体情况可以参考<a href="https://facebook.github.io/react/docs/advanced-performance.html#shouldcomponentupdate-in-action" target="_blank" rel="noopener">这里</a>。</p><p>由于列表的Virtual DOM在每次render时都是重新生成的，所以就不要指望<code>vDOMEq</code>相同了，最简单的方法就是实现每个<code>Item</code>的<code>shouldComponentUpdate</code>方法（通过比较当前和传入的<code>props</code>来判断是否需要更新，由于属性为<code>object</code>需要判断内部的变化，或许我们需要<a href="https://facebook.github.io/immutable-js/" target="_blank" rel="noopener">immutable-js</a>）。</p><h2 id="PureRenderMixin"><a href="#PureRenderMixin" class="headerlink" title="PureRenderMixin"></a>PureRenderMixin</h2><p>React提供的<code>PureRenderMixin</code>其实已经帮我们做好了上面需要做的事，按<a href="https://facebook.github.io/react/docs/pure-render-mixin.html" target="_blank" rel="noopener">文档</a>中的做法就行了。不过这个插件会比较所有的属性，在某些情况下可能会和预期相违。比如传入一个函数的情况，可以看看我提的一个<a href="https://github.com/facebook/react/issues/6601" target="_blank" rel="noopener">Issue</a>。</p><p>官方要保持这个插件的单一性，所以要忽略函数的话需要我们自己实现一下。<br>我们可以使用<a href="https://facebook.github.io/react/docs/shallow-compare.html" target="_blank" rel="noopener">Shallow Compare</a>这个插件来十分简便地完成，只要筛选掉原来props对象中的类型为<code>&#39;function&#39;</code>属性，再调用<code>Shallow Compare</code>就可以了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;都说网页的性能瓶颈在DOM操作，所以目前的主流前端框架（React、 Vue、AngularJs等）都在极力地减少DOM操作。&lt;/p&gt;
&lt;p&gt;就React而言，使用Virtual DOM和一个diff算法（实际就是使用一个uid来判断）来尽可能的重用现有的DOM，以此来减少DOM操作（毕竟添加比更新要耗时）。&lt;/p&gt;
&lt;p&gt;但是在一些需要高帧数刷新的组件里，即使是Virtual DOM的re-render也会显得十分耗时，那么我们看看怎么进行优化。&lt;/p&gt;
    
    </summary>
    
      <category term="develop" scheme="https://frezc.github.io/categories/develop/"/>
    
    
      <category term="react" scheme="https://frezc.github.io/tags/react/"/>
    
      <category term="performance" scheme="https://frezc.github.io/tags/performance/"/>
    
  </entry>
  
  <entry>
    <title>谈谈4月新番</title>
    <link href="https://frezc.github.io/2016/04/18/%E8%B0%88%E8%B0%884%E6%9C%88%E6%96%B0%E7%95%AA/"/>
    <id>https://frezc.github.io/2016/04/18/谈谈4月新番/</id>
    <published>2016-04-17T17:39:00.000Z</published>
    <updated>2019-03-21T13:48:42.051Z</updated>
    
    <content type="html"><![CDATA[<p>跳过了整个1月番后，感觉上都已经好久没追番了。说实话近期的新番实在不对我胃口，于是空闲时把逆转无赖开司和混沌武士给补了。</p><p>不过这次的4月番看起来还是不错了，总之又有动力去追了，到目前为止看了一些比较感兴趣的，其中倒是有几部十分有潜力呢。<br>下面就稍微谈谈</p><a id="more"></a><h3 id="迷家"><a href="#迷家" class="headerlink" title="迷家"></a>迷家</h3><p>冈妈的大名使得大家对这部番的走向想的出奇地一致啊，从前两集看来结局或许是那么回事。</p><p>这部番的第一个显而易见的特点就是角色多，为了展现每个人的特点特地花了半集来做自我介绍。在12话的时间内要写出这么多角色的特点还是十分困难的，如果写不出特点那就和普通的路人无二了。<br>不过从前两集来看人物描写的还是十分有趣的，希望别没说出自己的故事就莫名其妙的挂了啊。</p><h3 id="JOJO第四部"><a href="#JOJO第四部" class="headerlink" title="JOJO第四部"></a>JOJO第四部</h3><p>JOJO第三部说实话并没有期望中的那么好看，有几段让我印象深刻（赌徒达比、伊奇那几段），但是最后和屌爷大战时过程就没那么精彩了。<br>这次的不灭钻石当然还是很期待的。</p><h3 id="逆转裁判"><a href="#逆转裁判" class="headerlink" title="逆转裁判"></a>逆转裁判</h3><p>原作游戏本就没有什么引人入胜的剧情，更多的是找证物在法庭上反驳证人的乐趣，看到动画这么还原，只能是fans向了吧。</p><h3 id="当女孩遇到熊"><a href="#当女孩遇到熊" class="headerlink" title="当女孩遇到熊"></a>当女孩遇到熊</h3><p>女主好萌。<br>日常。<br>日常。<br>看第二集还是有点意思的。<br>属于那种可看可不看的番吧。</p><h3 id="从零开始的异世界生活"><a href="#从零开始的异世界生活" class="headerlink" title="从零开始的异世界生活"></a>从零开始的异世界生活</h3><p>听说小说挺受欢迎的，不看轻小说的我看了第一集也被吸引了。<br>这部番可以说是这季除了甲铁城外的最大黑马了吧。看了两集后，发现有漫画就补掉了。至少就漫画的内容来说确实是十分有趣的。</p><p>抛去回溯时间这种东西，这番的亮点不就是男主了吗，说实话男主的表现是最让我想看的，除了这点当然还有挺有特色的角色（比如帕克）。</p><h3 id="Joker-Game"><a href="#Joker-Game" class="headerlink" title="Joker Game"></a>Joker Game</h3><p>目前只看了一集，看起来是写二战谍战的，不过主角不是间谍啊（自己这么说的），所以要表达什么不是很清楚。<br>这种番还是看完再发表意见比较好。</p><h3 id="双星之阴阳师"><a href="#双星之阴阳师" class="headerlink" title="双星之阴阳师"></a>双星之阴阳师</h3><p>前两集看了没什么特点（除了那些挺好看的过场画面），没什么特点是指都能猜到接下来要干什么了。<br>不过听说漫画很有趣，好了不多说了，我先去找个能看这个漫画的app了。</p><h3 id="文豪野犬"><a href="#文豪野犬" class="headerlink" title="文豪野犬"></a>文豪野犬</h3><p>这番对于不了解剧中出场的日本文豪来说会挺无聊吧（除了妹子），只认识太宰治的我看到那个叫太宰治的帅哥喊出[人间失格]来发动和当妈一样能力的时候还真是一口老血啊。<br>我觉得我还是再去看一遍人间失格也比这番好吧。</p><h3 id="线上游戏的老婆不可能是女生（简称-老婆不可能是女生）"><a href="#线上游戏的老婆不可能是女生（简称-老婆不可能是女生）" class="headerlink" title="线上游戏的老婆不可能是女生（简称 老婆不可能是女生）"></a>线上游戏的老婆不可能是女生（简称 老婆不可能是女生）</h3><p>游戏中同工会的好友在现实中都是萌妹子，在现实中我肯定是不信的。<br>虽然是传统的套路，看了前两集还是稍微想看下去的。</p><h3 id="甲铁城的卡巴内瑞"><a href="#甲铁城的卡巴内瑞" class="headerlink" title="甲铁城的卡巴内瑞"></a>甲铁城的卡巴内瑞</h3><p>制作阵容还是十分豪华的，巨人的制作公司wit studio，鲁鲁修的剧本大河内一楼（最近几作是没什么可说的），还有只生产XX神曲的泽野弘之。还没放就已经万众瞩目了吧。<br>第一集的质量是意料之中的高，不过有大河在后面还真不敢保证，不过就前半相信是十分精彩的。<br>ps: 此作中的萝莉好萌，prpr。</p><h3 id="坂本ですが"><a href="#坂本ですが" class="headerlink" title="坂本ですが"></a>坂本ですが</h3><p>漫画很好看，动画做的也很不错，但是这么火还是挺奇怪的。</p><h3 id="飞翔的魔女"><a href="#飞翔的魔女" class="headerlink" title="飞翔的魔女"></a>飞翔的魔女</h3><p>又是一部日常系的吧。第一集看下来真的很平淡，不像女孩遇到熊那样还有些笑点。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>女高有个外传来着，不过语速太慢也没什么笑点。<br>还有些泡面就不说了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;跳过了整个1月番后，感觉上都已经好久没追番了。说实话近期的新番实在不对我胃口，于是空闲时把逆转无赖开司和混沌武士给补了。&lt;/p&gt;
&lt;p&gt;不过这次的4月番看起来还是不错了，总之又有动力去追了，到目前为止看了一些比较感兴趣的，其中倒是有几部十分有潜力呢。&lt;br&gt;下面就稍微谈谈&lt;/p&gt;
    
    </summary>
    
      <category term="essay" scheme="https://frezc.github.io/categories/essay/"/>
    
    
      <category term="anime" scheme="https://frezc.github.io/tags/anime/"/>
    
  </entry>
  
  <entry>
    <title>React的服务端渲染</title>
    <link href="https://frezc.github.io/2016/04/17/React%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93/"/>
    <id>https://frezc.github.io/2016/04/17/React的服务端渲染/</id>
    <published>2016-04-16T17:19:00.000Z</published>
    <updated>2019-03-21T13:48:42.024Z</updated>
    
    <content type="html"><![CDATA[<p>最近在使用React来做一个收藏夹类似的网站，同时也是为了学习一下前端技术，于是就尽可能的使用了流行的框架。</p><p><a href="https://github.com/Frezc/Share-Favors-App" target="_blank" rel="noopener">项目链接</a><br>这个项目中使用了React + Redux + React-router + babel + webpack + scss，来构建了一个同构应用。虽然同构应用并不是十分必要的，不过为了尝试下新技术还是尽可能地去用了。</p><p>后端由于一开始就考虑用Laravel了（那时候还不知道有同构应用这东西），而且直接丢给同学做了，所以并没有做到完全地同构，仅仅只是在渲染页面上同用一套代码。（由于不是用NodeJs，也就没使用GraphQL+Relay了）。</p><a id="more"></a><h2 id="在什么地方使用"><a href="#在什么地方使用" class="headerlink" title="在什么地方使用"></a>在什么地方使用</h2><p>服务端渲染能带的好处就是对搜索引擎友好，所以对于一般的SPA是不必要的。<br>所以在资源页面（用户信息页面、资源列表页面、资源详情页面等）上做好服务端渲染就行了。在一些编辑页面上就没什么必要了。</p><h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><p>如果要使用React来做服务端渲染，我觉得像Redux这样的库是有必要的。<br>Redux使用单一的状态树，传回初始状态时会十分方便，将下面的标签放到你的脚本标签前就行了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  window.__INITIAL_STATE__ = $&#123;JSON.stringify(initialState)&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然这里不要忘了过滤标签，我这里使用的方法是</p><p><strong>[Server]</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> initState = <span class="built_in">JSON</span>.stringify(store.getState());</span><br><span class="line"><span class="comment">// 使用encodeURIComponent过滤掉特殊字符</span></span><br><span class="line"><span class="keyword">let</span> page = renderFullPage(initView, <span class="built_in">encodeURIComponent</span>(initState));</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 别忘了引号</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">window</span>.__INITIAL_STATE__ = <span class="string">"$&#123;initState&#125;"</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>[Client]</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initState = <span class="built_in">window</span>.__INITIAL_STATE__;</span><br><span class="line"><span class="keyword">const</span> store = configureStore(<span class="built_in">JSON</span>.parse(<span class="built_in">decodeURIComponent</span>(initState)));</span><br></pre></td></tr></table></figure><h2 id="服务端渲染时的生命周期"><a href="#服务端渲染时的生命周期" class="headerlink" title="服务端渲染时的生命周期"></a>服务端渲染时的生命周期</h2><p>忘了在哪看到服务端渲染时不会执行React组件的生命周期方法了，实际上<code>componentWillMount</code>这个方法还是会执行的，所以在这个方法内还要注意下执行环境。</p><h2 id="配合React-Router和共用Action-Creator"><a href="#配合React-Router和共用Action-Creator" class="headerlink" title="配合React-Router和共用Action Creator"></a>配合React-Router和共用Action Creator</h2><p>可以使用React-Router提供的match来匹配路由表，然后通过回调函数得到路由信息，在路由信息中我们是可以得到对应的组件的，所以我们可以把调用的对应Action Creator（用过API获取数据）放到这个组件的一个静态方法里直接调用，这样我们就可以对所有路由一视同仁了。</p><p>相信大多数人会把网络请求放到Action Creator中来写，那么我们就可能懒得再去对服务器端写API请求了，而是直接dispatch这个Action Creator。作为同构代码这个Action Creator就需要注意下运行环境了，首先当然是使用<code>isomorphic-fetch</code>这个库，当然你可以自己判断当前环境来使用浏览器或node上的<code>fetch</code>。</p><h2 id="服务器端的同步请求"><a href="#服务器端的同步请求" class="headerlink" title="服务器端的同步请求"></a>服务器端的同步请求</h2><p>我这里的<strong>同步</strong>指的是服务端等待API请求结束后再返回页面。<br>在客户端只要在请求结束后进行异步地更新状态就好了，在服务端得等待这次请求（可能会有多个请求）完全结束才行。很多人会想到回调函数，不过给Action Creator加个回调函数的参数显得不太美观，而且似乎不能处理多个请求的情况。这里既然已经使用了<code>fetch</code>，那么干脆就使用es6中的<code>Promise</code>来处理。</p><p>1、首先在需要预渲染数据的页面里实现一个相同名称的静态方法来调用Action Creator。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server fetch</span></span><br><span class="line"><span class="keyword">static</span> fetchData = <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 注意要返回</span></span><br><span class="line">  <span class="keyword">return</span> fetchUserNetwork(params.id)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>2、然后在这个Action Creator中调用Api，同样要注意返回<code>fetch</code>返回的<code>Promise</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchUserNetwork</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这里调用的相当于 fetch(url)</span></span><br><span class="line">    <span class="keyword">return</span> Api.userInfo(id)</span><br><span class="line">      .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (response.ok) &#123;</span><br><span class="line">          <span class="comment">// 结果中有其他耗时处理的Promise同样要返回</span></span><br><span class="line">          <span class="keyword">return</span> response.json().then(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">            dispatch(fetchUserSuccess(json));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 让服务端能判断是否请求成功</span></span><br><span class="line">            <span class="keyword">return</span> response.status;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> response.status;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'error'</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3、在服务端我们将所有的<code>Promise</code>使用<code>Promise.all</code>方法放到一个<code>Promise</code>中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchComponentsData</span>(<span class="params">dispatch, components, params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> fetchData = components.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(cur).reduce(<span class="function">(<span class="params">acc, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> cur[key].hasOwnProperty(<span class="string">'fetchData'</span>) ? acc.concat(cur[key].fetchData) : acc;</span><br><span class="line">    &#125;, pre)</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">const</span> promises = fetchData.map(<span class="function"><span class="params">fetch</span> =&gt;</span> dispatch(fetch(params)));</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all(promises);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4、最后我们在这个<code>Promise</code>的<code>then</code>和<code>catch</code>中将组件渲染啊成string再返回就可以了。</p><h2 id="返回不同的状态码"><a href="#返回不同的状态码" class="headerlink" title="返回不同的状态码"></a>返回不同的状态码</h2><p>如果需要在返回页面时返回相应的状态码的话，只要像上面在<code>fetch().then</code>里<code>return response.status</code>。<br>然后就能通过<code>Promise.all</code>创建的<code>Promise</code>的<code>then</code>中得到一个状态码的数组了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetchComponentsData(store.dispatch, renderProps.components, renderProps.params)</span><br><span class="line">      .then(<span class="function"><span class="params">status</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'statu'</span>, status[<span class="number">0</span>])</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>判断当前环境的函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isBrowser = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"try &#123; return this === window; &#125; catch(e) &#123; return false; &#125;"</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isNode = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"try &#123; return this === global; &#125; catch(e) &#123; return false; &#125;"</span>);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在使用React来做一个收藏夹类似的网站，同时也是为了学习一下前端技术，于是就尽可能的使用了流行的框架。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Frezc/Share-Favors-App&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;项目链接&lt;/a&gt;&lt;br&gt;这个项目中使用了React + Redux + React-router + babel + webpack + scss，来构建了一个同构应用。虽然同构应用并不是十分必要的，不过为了尝试下新技术还是尽可能地去用了。&lt;/p&gt;
&lt;p&gt;后端由于一开始就考虑用Laravel了（那时候还不知道有同构应用这东西），而且直接丢给同学做了，所以并没有做到完全地同构，仅仅只是在渲染页面上同用一套代码。（由于不是用NodeJs，也就没使用GraphQL+Relay了）。&lt;/p&gt;
    
    </summary>
    
      <category term="develop" scheme="https://frezc.github.io/categories/develop/"/>
    
    
      <category term="react" scheme="https://frezc.github.io/tags/react/"/>
    
      <category term="server render" scheme="https://frezc.github.io/tags/server-render/"/>
    
  </entry>
  
  <entry>
    <title>标准化React + Redux = 纯函数式编程？</title>
    <link href="https://frezc.github.io/2016/03/06/%E6%A0%87%E5%87%86%E5%8C%96React-Redux-%E7%BA%AF%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%EF%BC%9F/"/>
    <id>https://frezc.github.io/2016/03/06/标准化React-Redux-纯函数式编程？/</id>
    <published>2016-03-05T18:35:00.000Z</published>
    <updated>2019-03-21T13:48:42.049Z</updated>
    
    <content type="html"><![CDATA[<p>最近看到github上一个Airbnb公司的js风格<a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">指导手册</a>，感觉里面讲的都挺有道理的，里面的风格都是趋向使用es6来取代之前的各个api。<br>其中有关React有一条提到了<em>在没有state和ref时，推荐使用单纯的绘制函数代替类</em>，看到后翻了下官方文档，发现<code>propTypes</code>和<code>defaultProps</code>还是能用的。</p><p>想起之前用的Redux框架，其核心不就是将所有组件无状态化吗，配合它岂不是就能做到完全的函数式编程？<br>于是马上去改写了下之前写的<a href="https://github.com/Frezc/AnimeList-in-React-Redux" target="_blank" rel="noopener">小例子</a>。</p><a id="more"></a><p>改写需要做的也就是把类中的所有函数拿出来，将<code>render</code>名字改为类名，传入参数<code>props</code>，删掉<code>this</code>，将其他函数的参数进行相应的修改，最后别忘了<code>export default XXX;</code>。<br><a href="https://github.com/Frezc/AnimeList-in-React-Redux/blob/3078681dc70e6a5b55fa2739314ac9c2d07eecc3/src/components/AnimeDayList.js" target="_blank" rel="noopener">AnimeDayList.js</a> –改写前 <a href="https://github.com/Frezc/AnimeList-in-React-Redux/blob/master/src/components/AnimeDayList.js" target="_blank" rel="noopener">AnimeDayList.js</a> –改写后</p><p>由于基于flux思想进行的设计，所有组件都可以改为纯函数。由于在根组件<strong>App</strong>里定义了<code>componentWillMount</code>生命周期方法，所以就没改了，当然根组件作为有状态组件在flux思想里也是完全合理的。</p><p>整个例子的6个组件只定义了一个类，其他全部都是纯函数，使得整个项目清爽了很多啊。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看到github上一个Airbnb公司的js风格&lt;a href=&quot;https://github.com/airbnb/javascript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;指导手册&lt;/a&gt;，感觉里面讲的都挺有道理的，里面的风格都是趋向使用es6来取代之前的各个api。&lt;br&gt;其中有关React有一条提到了&lt;em&gt;在没有state和ref时，推荐使用单纯的绘制函数代替类&lt;/em&gt;，看到后翻了下官方文档，发现&lt;code&gt;propTypes&lt;/code&gt;和&lt;code&gt;defaultProps&lt;/code&gt;还是能用的。&lt;/p&gt;
&lt;p&gt;想起之前用的Redux框架，其核心不就是将所有组件无状态化吗，配合它岂不是就能做到完全的函数式编程？&lt;br&gt;于是马上去改写了下之前写的&lt;a href=&quot;https://github.com/Frezc/AnimeList-in-React-Redux&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;小例子&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="develop" scheme="https://frezc.github.io/categories/develop/"/>
    
    
      <category term="react" scheme="https://frezc.github.io/tags/react/"/>
    
      <category term="redux" scheme="https://frezc.github.io/tags/redux/"/>
    
      <category term="fp" scheme="https://frezc.github.io/tags/fp/"/>
    
  </entry>
  
  <entry>
    <title>开始使用Redux</title>
    <link href="https://frezc.github.io/2016/03/02/%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8Redux/"/>
    <id>https://frezc.github.io/2016/03/02/开始使用Redux/</id>
    <published>2016-03-01T17:29:00.000Z</published>
    <updated>2019-03-21T13:48:42.049Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始试着用React来写前端了，虽然感觉在构建Web上React实在是有些大材小用，但是毕竟这个库的可是打着<code>Learn Once, Write Anywhere</code>的口号来着，在写不同平台应用时会用React写得开心就行。</p><p>然后我发现了Redux这个东西，这是flux的一个实现，那么flux是什么玩意呢？<br>很明显flux不是什么实际的框架，而是一种框架思想，特点就是单项数据流吧，它是将所有状态更新都放到一个数据流中进行处理。相比MVC，Flux弱化了Controller的功能吧。</p><p>下面讲讲具体的<a href="https://github.com/Frezc/AnimeList-in-React-Redux" target="_blank" rel="noopener">例子</a>。(请确保你对React已经十分熟悉)</p><a id="more"></a><p>官方的todoApp是十分简单明了的演示了，第一次照着例子打一遍可以有一个大致的理解。</p><p>首先看一下应用的一个流程图<br><img src="/images/2016/03/653251524.png" alt="flux-simple-f8-diagram-with-client-action-1300w.png"></p><p>这是应用内部数据流的演示，实际上Redux已经帮我们把数据流相关的函数封装好了，所以剩下的需要我们写的也就<strong>action creator</strong>和<strong>reducer</strong>了。<br>我写了一个<a href="https://github.com/Frezc/react-redux-starter" target="_blank" rel="noopener">starter</a>，可以直接拿来修改开发。</p><h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><p>我个人习惯还是从View开始开发，View部分和原本的React开发并没有什么不同。只要注意一点，<strong>不要在组件中使用state</strong>，所有需要控制的地方都使用属性，之后你需要从父组件将属性传入。<br>页面我使用全文本表示了，并没有加多少css。</p><h2 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h2><p>因为没有在组件里使用state，所以状态怎么保存呢？<br>Redux里将所有状态都放到了一棵状态树里，而这个状态树保存在Store实例里。那么在View如何获得这个状态树呢。</p><p><img src="/images/2016/03/1929471663.png" alt="create_store.png"></p><p>这里做了3件事，绑定中间件、创建store、通过Provider组件绑定View和store。这么做以后store里的状态树更新时都会传递给View。<br>然后在你需要获得状态树的组件里（官方建议只在顶层组件里获取）<br><img src="/images/2016/03/4278813248.png" alt="view_connect.png"></p><p>通过connect绑定该View后，每次状态树更新时都会调用<em>select</em>函数，参数就是状态树，该函数的返回对象会传递给该View的props对象<br><img src="/images/2016/03/755933590.png" alt="state_props.png"></p><p>这样之前根据之前写的通过属性控制的View就会自动更新了。</p><h2 id="Action-amp-Action-Creator"><a href="#Action-amp-Action-Creator" class="headerlink" title="Action &amp; Action Creator"></a>Action &amp; Action Creator</h2><p>Action指的是更新状态的请求，其格式一般（不是一定）是这样的</p><pre><code>{type: DOWHAT, params: optional}</code></pre><p>type是提醒Redux要做什么，Action中也能跟其他参数。当然你可以自己定义格式，只要在后面Reducer里处理时对应就好。</p><p>Action Creator就是返回Action对象的纯函数，其存在的意义主要是少打代码、减少错误。<br><img src="/images/2016/03/3965136547.png" alt="action_creator.png"></p><p>有了Action后只要调用<em>dispatch</em>方法（见上上图）就能通知Redux要干什么了，接下来Action会传递给Reducer处理，以更新状态树。</p><p>PS: 如果需要请求API的话只要不写在Reducer里就可以了，dispatch action纯粹只是用来更新状态的，和之前setState功能相同。所以只要请求完后异步dispatch一下就可以了。不一定要使用redux-thunk之类的异步库。</p><h2 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h2><p>Reducer有点类似于MVC中Controller的功能，其作用就是通过用户传来的Action更新状态树。<br>Reducer都是纯函数，所以这里需要注意下函数式编程（fundamental pattern）的思想。<br>怎么写见<a href="http://redux.js.org/docs/basics/Reducers.html" target="_blank" rel="noopener">官方文档</a>。</p><p>写Reducer做好3点就可以了</p><ol><li>按照状态树的结构拆分，根Reducer最好调用<em>combineReducers</em></li><li>所有Reducer函数里的state<strong>必须</strong>要有初始值，在es6中很简单，直接在参数中赋值就行了，像其他编程语言一样。</li><li>为了符合fp的思想，<strong>不要</strong>在reducer中修改传入的state。如果要修改则应该返回一个全新的state。</li></ol><p>总的来说reducer怎么写取决于状态树的设计，所以建议在写reducer前把状态树设计好，再对应状态树写函数。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然一开始搭建一个Redux的结构比普通项目要麻烦很多。但是之后再进行修改时就会发现项目结构十分的清晰，比起MVC中将管理状态、组件更新、网络请求等全部塞到Controller里，Redux把这些功能都分散到了Reducer、Store、Action Creator里，就显的很整洁了。</p><p>说实话理解Redux还是花了不少时间的，尤其是要解决<em>“这比起MVC有什么优势吗”</em>这个疑问。<br>我这里还是推荐<a href="http://redux.js.org" target="_blank" rel="noopener">官方文档</a>(<a href="http://cn.redux.js.org/" target="_blank" rel="noopener">中文版</a>)。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近开始试着用React来写前端了，虽然感觉在构建Web上React实在是有些大材小用，但是毕竟这个库的可是打着&lt;code&gt;Learn Once, Write Anywhere&lt;/code&gt;的口号来着，在写不同平台应用时会用React写得开心就行。&lt;/p&gt;
&lt;p&gt;然后我发现了Redux这个东西，这是flux的一个实现，那么flux是什么玩意呢？&lt;br&gt;很明显flux不是什么实际的框架，而是一种框架思想，特点就是单项数据流吧，它是将所有状态更新都放到一个数据流中进行处理。相比MVC，Flux弱化了Controller的功能吧。&lt;/p&gt;
&lt;p&gt;下面讲讲具体的&lt;a href=&quot;https://github.com/Frezc/AnimeList-in-React-Redux&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;例子&lt;/a&gt;。(请确保你对React已经十分熟悉)&lt;/p&gt;
    
    </summary>
    
      <category term="develop" scheme="https://frezc.github.io/categories/develop/"/>
    
    
      <category term="react" scheme="https://frezc.github.io/tags/react/"/>
    
      <category term="redux" scheme="https://frezc.github.io/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>react-native对md风格中StatusBar的处理方式</title>
    <link href="https://frezc.github.io/2016/02/21/react-native%E5%AF%B9md%E9%A3%8E%E6%A0%BC%E4%B8%ADStatusBar%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/"/>
    <id>https://frezc.github.io/2016/02/21/react-native对md风格中StatusBar的处理方式/</id>
    <published>2016-02-20T20:09:00.000Z</published>
    <updated>2019-03-21T13:48:42.045Z</updated>
    
    <content type="html"><![CDATA[<p>自从rn支持android以后，出现了不少的material design的库。<br>用了下一个叫<a href="https://github.com/react-native-material-design/react-native-material-design" target="_blank" rel="noopener">react-native-material-design</a>的库，先不谈性能方面的缺陷，这个库完全忽视了<strong>StatusBar</strong>的处理，使得其Drawer弹出时会很难看。<br>至少目前还没有看到哪个库对<strong>StatusBar</strong>进行了特殊处理，官方倒是有一个StatusBar的组件可以用来控制应用中<strong>StatusBar</strong>的表现，不过这个组件在android里是调用5.0加入api来实现的，也就是说只对5.0以上的系统有效。而且这个组件在实现Drawer占满屏幕的效果时，<strong>StatusBar</strong>要设为translucent，此时和在theme中设置<strong>windowTranslucentStatus</strong>没有什么区别，依然要考虑<strong>StatusBar</strong>空出来的地方。所以这个组件还不如设置theme呢，起码后者能兼容到4.4。</p><p>下面就谈谈比较合适的方法。</p><a id="more"></a><p><img src="/images/2016/02/1657079296.png" alt="bilibili_md.png"></p><p>拿b站的app来看看要实现的效果。</p><h2 id="RN中的实现"><a href="#RN中的实现" class="headerlink" title="RN中的实现"></a>RN中的实现</h2><p>这个效果基本上都是设置translucent后，在Statusbar的位置画一个相同大小的<strong>View</strong>来实现的。rn里虽然没有现成的库，但是实现起来也是非常简单的。</p><p>首先在android项目里的控制app theme的style项里添加</p><pre><code>&lt;item name=&quot;android:windowTranslucentStatus&quot;&gt;true&lt;/item&gt;</code></pre><p>然后在<strong>Navigator</strong>上添加View<br><img src="/images/2016/02/2531076439.png" alt="statusbar_add.png"></p><p>这里的style为<br><code>`</code>javascript<br>statusbar: {<br>  backgroundColor: COLOR.googleBlue700.color, // Statusbar的颜色<br>  height: 24                   // Statusbar的高度，android上为24dp<br>}</p><p>实现的效果<br><img src="/images/2016/02/1361499160.png" alt="my_statusbar.png"></p><p><img src="/images/2016/02/925583762.png" alt="my_statusbar_drawer.png"></p><p>这样做还是有些不足的，比如<strong>Statusbar</strong>在未来的android版本中出现变动的话就得修改代码了，当然为了避免这点我们可以写个原生模块动态获取<strong>Statusbar</strong>的高度。</p><p>还有个办法就是在原生的android的项目中自定义View，不过这种方法麻烦而且扩展性不好，就不去实现了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从rn支持android以后，出现了不少的material design的库。&lt;br&gt;用了下一个叫&lt;a href=&quot;https://github.com/react-native-material-design/react-native-material-design&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-native-material-design&lt;/a&gt;的库，先不谈性能方面的缺陷，这个库完全忽视了&lt;strong&gt;StatusBar&lt;/strong&gt;的处理，使得其Drawer弹出时会很难看。&lt;br&gt;至少目前还没有看到哪个库对&lt;strong&gt;StatusBar&lt;/strong&gt;进行了特殊处理，官方倒是有一个StatusBar的组件可以用来控制应用中&lt;strong&gt;StatusBar&lt;/strong&gt;的表现，不过这个组件在android里是调用5.0加入api来实现的，也就是说只对5.0以上的系统有效。而且这个组件在实现Drawer占满屏幕的效果时，&lt;strong&gt;StatusBar&lt;/strong&gt;要设为translucent，此时和在theme中设置&lt;strong&gt;windowTranslucentStatus&lt;/strong&gt;没有什么区别，依然要考虑&lt;strong&gt;StatusBar&lt;/strong&gt;空出来的地方。所以这个组件还不如设置theme呢，起码后者能兼容到4.4。&lt;/p&gt;
&lt;p&gt;下面就谈谈比较合适的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="develop" scheme="https://frezc.github.io/categories/develop/"/>
    
    
      <category term="android" scheme="https://frezc.github.io/tags/android/"/>
    
      <category term="react native" scheme="https://frezc.github.io/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>在Android的原生模块中得到RN组件的引用</title>
    <link href="https://frezc.github.io/2016/02/19/%E5%9C%A8Android%E7%9A%84%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97%E4%B8%AD%E5%BE%97%E5%88%B0RN%E7%BB%84%E4%BB%B6%E7%9A%84%E5%BC%95%E7%94%A8/"/>
    <id>https://frezc.github.io/2016/02/19/在Android的原生模块中得到RN组件的引用/</id>
    <published>2016-02-19T15:23:00.000Z</published>
    <updated>2019-03-21T13:48:42.048Z</updated>
    
    <content type="html"><![CDATA[<p>最近学习了下使用react-native(以下简称rn)来做App，这是目前唯一一个编写<strong>跨平台</strong>的<strong>本地应用</strong>的<strong>开源</strong>库，所以人气也是非常高啊。<br>因为是新东西，所以相关的讨论、开源库之类的都很少，目前有很多东西还是得依赖原生模块来处理。好在的是rn提供了一些挺简单的交互方法，所以不至于会有无法解决的严重后果。</p><p>不过在调用原生模块时，一开始我不太清楚怎么去获得rn里组件的实例引用，在网上也没找到相关问题，后来在看源代码后发现该怎么做了。</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>一开始我是想看看<strong>DrawerLayoutAndroid</strong>组件是如何实现调用<em>openDrawer</em>和<em>closeDrawer</em>方法的，发现它是通过<strong>UIManager</strong>这个模块来分发命令，然后去看了下这个模块的源代码，发现了创建、删除、查找View等方法的装饰方法，具体是用<strong>UIImplementation</strong>这个类实现的。<br>于是找到<strong>UIImplementation</strong>中的<em>createView</em>方法</p><p><img src="/images/2016/02/2765341748.png" alt="uiimplementation_createview"></p><p>可见这个方法并没有创建真正的本地组件，之后通过<strong>NativeViewHierarchyOptimizer</strong>（优化UI层次）和<strong>UIViewOperationQueue</strong>（渲染的缓冲队列）两个类的处理后调用了<strong>NativeViewHierarchyManager</strong>的<em>createView</em>方法。</p><p><img src="/images/2016/02/2125075922.png" alt="nativeviewhierarchymanager_createview.png"></p><p>上图是这个方法中创建本地组件的关键语句。这里有三行注释，主要讲的就是把react的tag存到组件的id中，这样更容易复用组件。调用<em>setId</em>将tag保存到组件的属性当中。<br>这里我们就发现了原生组件的id其实就是对于rn组件的tag。那么最后一个问题就是怎么获得tag呢？</p><p><img src="/images/2016/02/422551472.png" alt="drawerlayoutandroid_gettag.png"></p><p>在<strong>DrawerLayoutAndroid.android.js</strong>文件中我们找到<em>closeDrawer</em>方法，它调用了<strong>UIManager</strong>的<em>dispatchViewManagerCommand</em>方法，这个方法是讲指令传递给目标组件管理器调用的（下篇博客会讲），在源码中就能知道第一个传入参数其实就是rn组件的tag。那么如何获取就和<em>_getDrawerLayoutHandle</em>方法写的一样了。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>自己实现原生模块时需要找到rn组件实例的话只要相应的传入tag，然后调用<em>findViewById</em>即可。</p><p><img src="/images/2016/02/1683079715.png" alt="toastmodule_settext.png"></p><p>这里我偷了个懒，直接把MainActivity的实例暴露了出来，最好的方法还是利用消息传递给Activity处理。（<strong>更正</strong>：最好的方法应该是注册<strong>Package</strong>时传入activity实例，然后在<em>createNativeModules</em>方法中将activity传给module对象。）<br>这里要注意的是，模块的方法是异步执行的，如果你要更新ui的话，要切到主线程执行。</p><p>上面的代码还是存在挺严重的bug的，第二次调用<em>setText</em>就会时程序fc，目前还不清楚原因。<br>目前来说并不推荐利用这样的方法来更新rn的组件。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近学习了下使用react-native(以下简称rn)来做App，这是目前唯一一个编写&lt;strong&gt;跨平台&lt;/strong&gt;的&lt;strong&gt;本地应用&lt;/strong&gt;的&lt;strong&gt;开源&lt;/strong&gt;库，所以人气也是非常高啊。&lt;br&gt;因为是新东西，所以相关的讨论、开源库之类的都很少，目前有很多东西还是得依赖原生模块来处理。好在的是rn提供了一些挺简单的交互方法，所以不至于会有无法解决的严重后果。&lt;/p&gt;
&lt;p&gt;不过在调用原生模块时，一开始我不太清楚怎么去获得rn里组件的实例引用，在网上也没找到相关问题，后来在看源代码后发现该怎么做了。&lt;/p&gt;
    
    </summary>
    
      <category term="develop" scheme="https://frezc.github.io/categories/develop/"/>
    
    
      <category term="android" scheme="https://frezc.github.io/tags/android/"/>
    
      <category term="react native" scheme="https://frezc.github.io/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>用SVG画一个笑脸男图标</title>
    <link href="https://frezc.github.io/2015/12/31/%E7%94%A8SVG%E7%94%BB%E4%B8%80%E4%B8%AA%E7%AC%91%E8%84%B8%E7%94%B7%E5%9B%BE%E6%A0%87/"/>
    <id>https://frezc.github.io/2015/12/31/用SVG画一个笑脸男图标/</id>
    <published>2015-12-30T16:23:00.000Z</published>
    <updated>2019-03-21T13:48:42.049Z</updated>
    
    <content type="html"><![CDATA[<p>自从看完攻壳的第一季后就想自己做个会动的笑脸男的矢量图图标了，最近花了点时间终于搞定了。<br>下面我会谈谈网页上矢量图该怎么写。<br><a href="http://frezc.github.io/NetResources/waraiotoko/">预览</a>（在ie和edge上文字无法滚动，在chrome上是正常的，其他浏览器不清楚）。<a href="https://github.com/Frezc/NetResources/blob/master/waraiotoko/main.js" target="_blank" rel="noopener">源代码</a>。</p><a id="more"></a><h2 id="制作矢量图的工具"><a href="#制作矢量图的工具" class="headerlink" title="制作矢量图的工具"></a>制作矢量图的工具</h2><p>虽然在网页上是用代码实现的，但是设计还是需要一个能画矢量图的工具的。<br>可以用Illustrator(Ai)或者一个在线的工具就可以了。我这里直接用了别人用ai设计的矢量图，所以对详情设计也不太了解。</p><p>然后使用一个越方便越好的画svg的js库就行了。原本看网上大家都推荐使用raphael.js，但是这个库没有画路径文字的方法，于是果断找了另外一个库svg.js，这个库能解决这个问题，还比raphael.js要小。</p><h2 id="用代码画矢量图"><a href="#用代码画矢量图" class="headerlink" title="用代码画矢量图"></a>用代码画矢量图</h2><p>笑脸男的图像里基本上都是使用路径画好的，所以只要使用画路径的方法就行了。关于路径，w3有一套<a href="http://www.w3.org/TR/SVG/paths.html" target="_blank" rel="noopener">规范</a>，只要能看懂这里的写法就好，这是所有库都通用的标准写法。<br>其中可能让人困惑的一点就是arc画法了（其实规范里的图已经说明的挺好了）。它是提供当前点（起始点）、x、y上的半径、旋转角度、large-arc-flag、sweep-flag和终点来确定一个弧的。其中large-arc-flag指是否画大一点的弧，sweep-flag指从起点到终点是否为顺时针画线。</p><p>对路径熟悉后就可以把你设计图给搬进代码里了，如果你的编辑器能直接生成w3标准的代码的话就再好不过了。</p><h2 id="转动的文字"><a href="#转动的文字" class="headerlink" title="转动的文字"></a>转动的文字</h2><p>文字的部分其实有点麻烦，麻烦在做动画上。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t1 = paper.text(s);</span><br><span class="line">t1.fill(<span class="string">'#23498C'</span>).font(&#123;<span class="attr">size</span>: <span class="number">50</span>, <span class="string">'letter-spacing'</span>: <span class="number">2.3</span>, <span class="attr">weight</span>: <span class="number">700</span>&#125;)</span><br><span class="line">t1.path(<span class="string">'M 605,365 A 300,300 0 1,1 605,260'</span>)</span><br></pre></td></tr></table></figure></p><p>先将路径确定好，并调整文字的一些属性，使其和原图一样。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t1.textPath().attr(<span class="string">'startOffset'</span>, <span class="string">'0'</span>).animate(&#123; <span class="attr">ease</span>: <span class="string">'-'</span>, <span class="attr">duration</span>: <span class="number">10000</span>&#125;).attr(<span class="string">'startOffset'</span>, <span class="string">'100%'</span>).loop()</span><br></pre></td></tr></table></figure></p><p>然后调用动画方法就能动了。但是这样无法将文字循环，文字播放到终点就消失了。<br>一开始我想再用一个文字矢量图接着这个画的，但是svg里的<code>startOffset</code>不能使用负值（负值当然也是有效的，但是不能像0~100%这样设置）。于是想用逆时针路径然后倒过来播放，可惜这样文字就倒过来了，也不知道是否有办法设置。</p><p>最后终于想到一个完美的方案<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t1.path(<span class="string">'M 605,365 A 300,300 0 1,1 605,260 M 605,365 A 300,300 0 1,1 605,260'</span>)</span><br><span class="line">t1.textPath().attr(<span class="string">'startOffset'</span>, <span class="string">'0'</span>).animate(&#123; <span class="attr">ease</span>: <span class="string">'-'</span>, <span class="attr">duration</span>: <span class="number">10000</span>&#125;).attr(<span class="string">'startOffset'</span>, <span class="string">'50%'</span>).loop()</span><br></pre></td></tr></table></figure></p><p>把路径画两遍，然后播放时<code>startOffset</code>从0~50%进行循环就行了。<br>如果你也想实现这种无限循环地旋转的话，可以试试这个方法。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>之所以做这个还是由于对笑脸男这个人物的喜爱吧，有能力的同时愿意来为真相做出贡献。有意思的是，攻壳第二季第二集的主人公和他完全就是相反的人。空想但没有勇气去做，想想自己和大概也就是这样的人了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从看完攻壳的第一季后就想自己做个会动的笑脸男的矢量图图标了，最近花了点时间终于搞定了。&lt;br&gt;下面我会谈谈网页上矢量图该怎么写。&lt;br&gt;&lt;a href=&quot;http://frezc.github.io/NetResources/waraiotoko/&quot;&gt;预览&lt;/a&gt;（在ie和edge上文字无法滚动，在chrome上是正常的，其他浏览器不清楚）。&lt;a href=&quot;https://github.com/Frezc/NetResources/blob/master/waraiotoko/main.js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;源代码&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="develop" scheme="https://frezc.github.io/categories/develop/"/>
    
    
      <category term="动漫" scheme="https://frezc.github.io/tags/%E5%8A%A8%E6%BC%AB/"/>
    
  </entry>
  
  <entry>
    <title>动画的排行榜 - 页面实现</title>
    <link href="https://frezc.github.io/2015/12/25/%E5%8A%A8%E7%94%BB%E7%9A%84%E6%8E%92%E8%A1%8C%E6%A6%9C-%E9%A1%B5%E9%9D%A2%E5%AE%9E%E7%8E%B0/"/>
    <id>https://frezc.github.io/2015/12/25/动画的排行榜-页面实现/</id>
    <published>2015-12-25T04:18:00.000Z</published>
    <updated>2019-03-21T13:48:42.048Z</updated>
    
    <content type="html"><![CDATA[<p>离上篇文章都已经一个多月了啊，最近都在玩mho，也没什么时间来做这个。不过目前还是把基本的功能都给实现了，做了一个展示页面。</p><p>和以前说的一样，后端是使用<a href="https://laravel.com/" target="_blank" rel="noopener">Laravel</a>框架实现的api服务器，前端是用<a href="http://cn.vuejs.org/" target="_blank" rel="noopener">vue.js</a>和<a href="http://semantic-ui.com/" target="_blank" rel="noopener">semantic-ui</a>实现的页面。<br><a href="http://statistics.frezc.com/anime-rank.html" target="_blank" rel="noopener">点此访问</a></p><a id="more"></a><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p>Laravel也不是第一次用了，还是挺熟悉的，不过也碰到过一些问题，这里记录一下。</p><ul><li>数据库配置：api返回错误信息<code>The Response content must be a string or object implementing __toString()</code>时，首先还是要检查一下数据库的配置是否正确。我这里将动漫排行的数据放在了一个独立的数据库中管理，所以要在laravel里额外配置不同的数据库连接，这里会十分容易出错。</li><li>跨域请求：使用ajax请求不同域名的api时需要注意下跨域请求的问题，为了能进行跨域请求，返回的header里需要有<code>Access-Control-Allow-Origin</code>这一项来确定允许跨域请求的域名。我这里为了方便，让所有api能让所有域名访问（方便本地测试），直接修改nginx的配置文件，在<code>location</code>中添加一条<code>add_header Access-Control-Allow-Origin *;</code>就ok了。</li></ul><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>前端的css库使用了某人推荐的semantic-ui，我也没用过bootstrap，所以用什么都无所谓，不过semantic比起bootstrap的资料真是少。<br>然后是vue.js，数据的双向绑定和定义组件都是非常好用的，我没有用过其他类似的库，所以也不好比较。</p><p>虽然没有必要，但还是试着用了webpack管理项目，这个库简单来说就是将一堆js和css文件打包的一个js文件中，在发布时你的页面中只要引用一个打包后的js文件就行了，对于非常复杂的单页应用来说，这是个能减少项目复杂度的工具。</p><p>然后讲讲问题</p><ul><li>渲染速度：原本我想把1000多项数据直接展示的，不过渲染速度还是有限，vue.js渲染1000项的列表也得要接近2秒的时间，于是想想还是分页了。</li><li>提示框：在页面中使用了semantic的提示框组件，不过使用的时候仅仅在html中添加<code>data-title</code>和<code>data-content</code>并没有什么用，还要调用这些节点的<code>popup()</code>函数。但是节点都是通过vue.js之后动态生成的，那要怎么在渲染完成后调用呢？<br>这里可以使用vue.js提供的自定义指令实现，注册一个指令，在<code>bind</code>接口中调用就ok了。</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>本来想借用下Bangumi的图片的，不过没法跨域请求，那就没办法了，之后有空就去爬取一遍吧。</p><p>剩下还有个留言评论的模块，没时间就用多说来做了。</p><p>PS: 最近一直在玩mho 华东一 隐士之森 id: 心悦会员 欢迎找我玩<br>PS2: steam也开始打折了，不过启示录2怎么就第一章打折啊，卡表还是坑。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;离上篇文章都已经一个多月了啊，最近都在玩mho，也没什么时间来做这个。不过目前还是把基本的功能都给实现了，做了一个展示页面。&lt;/p&gt;
&lt;p&gt;和以前说的一样，后端是使用&lt;a href=&quot;https://laravel.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Laravel&lt;/a&gt;框架实现的api服务器，前端是用&lt;a href=&quot;http://cn.vuejs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue.js&lt;/a&gt;和&lt;a href=&quot;http://semantic-ui.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;semantic-ui&lt;/a&gt;实现的页面。&lt;br&gt;&lt;a href=&quot;http://statistics.frezc.com/anime-rank.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点此访问&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="develop" scheme="https://frezc.github.io/categories/develop/"/>
    
    
      <category term="动漫" scheme="https://frezc.github.io/tags/%E5%8A%A8%E6%BC%AB/"/>
    
      <category term="排行" scheme="https://frezc.github.io/tags/%E6%8E%92%E8%A1%8C/"/>
    
      <category term="anime" scheme="https://frezc.github.io/tags/anime/"/>
    
      <category term="rank" scheme="https://frezc.github.io/tags/rank/"/>
    
  </entry>
  
  <entry>
    <title>做个动画排行榜 - 标题匹配</title>
    <link href="https://frezc.github.io/2015/11/22/%E5%81%9A%E4%B8%AA%E5%8A%A8%E7%94%BB%E6%8E%92%E8%A1%8C%E6%A6%9C%20-%20%E6%A0%87%E9%A2%98%E5%8C%B9%E9%85%8D/"/>
    <id>https://frezc.github.io/2015/11/22/做个动画排行榜 - 标题匹配/</id>
    <published>2015-11-22T13:07:00.000Z</published>
    <updated>2019-03-21T13:48:42.048Z</updated>
    
    <content type="html"><![CDATA[<p>上次写了篇做排行的<a href="/2015/11/19/做一个多网站的动画排行榜吧">文章</a>，然后做到现在，匹配不同网站的信息还是一大难点啊，做到现在，剩下的数据还是手工去处理会准确且快一些。</p><p>这次在将Ann与Sati信息匹配时使用了与Bgm和Sati匹配时不同的方法。</p><a id="more"></a><h2 id="Ann的信息匹配"><a href="#Ann的信息匹配" class="headerlink" title="Ann的信息匹配"></a>Ann的信息匹配</h2><p>这次匹配的核心是ratio，jaro和jaro_winkler这3个字符串相似度算法，利用这些算法很明显可以解决之前存在的标题中有单个字符不匹配的情况。这次使用的<a href="https://github.com/Frezc/Anime-Statistics-Crawl/blob/master/name_compare_rule.md" target="_blank" rel="noopener">一些规则</a>。<br>这里原先Ann的日期获取缺失了很多，后来看了几个页面后才发现是日期会有不同的结构，重新爬取了一遍（<a href="https://github.com/Frezc/Anime-Statistics-Crawl/blob/master/anime_statistics/spiders/ANNConsSpider.py" target="_blank" rel="noopener">代码</a>），顺便做了次筛选，分辨出评价人数过少的番剧。<br>这次爬取后，日期基本就完整了，使用了日期比对后匹配率一下子就上来了，最后只剩85项未匹配。这些就直接手工解决了。</p><p>最后一个问题就是有些番剧在一个网站上是合并的，而在其他两个网站上是分开的。这里我原本是直接留下第一季的信息，但是后来发现还挺多的，还是将多个url用逗号隔开保存了，到时候取分时直接计算多个url的平均分了。</p><h2 id="网站计划"><a href="#网站计划" class="headerlink" title="网站计划"></a>网站计划</h2><p>网站我目前的想法是，后端api服务器Laravel，前端Semantic UI + Vue.js。<br>不过目前时间太少，这个计划会挺慢的。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>因为python没有和c那样的for循环，所以在项目中一直使用while循环进行迭代，这次加了个continue，发现就出bug了。于是又找了下资料，才知道python中写索引迭代要这么写<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(start, end):</span><br><span class="line">    your code</span><br></pre></td></tr></table></figure></p><p>相当于<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=start; i &lt; end; i++)&#123;</span><br><span class="line">    your code</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上次写了篇做排行的&lt;a href=&quot;/2015/11/19/做一个多网站的动画排行榜吧&quot;&gt;文章&lt;/a&gt;，然后做到现在，匹配不同网站的信息还是一大难点啊，做到现在，剩下的数据还是手工去处理会准确且快一些。&lt;/p&gt;
&lt;p&gt;这次在将Ann与Sati信息匹配时使用了与Bgm和Sati匹配时不同的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="develop" scheme="https://frezc.github.io/categories/develop/"/>
    
    
      <category term="anime" scheme="https://frezc.github.io/tags/anime/"/>
    
      <category term="rank" scheme="https://frezc.github.io/tags/rank/"/>
    
  </entry>
  
  <entry>
    <title>做一个多网站的动画排行榜吧</title>
    <link href="https://frezc.github.io/2015/11/19/%E5%81%9A%E4%B8%80%E4%B8%AA%E5%A4%9A%E7%BD%91%E7%AB%99%E7%9A%84%E5%8A%A8%E7%94%BB%E6%8E%92%E8%A1%8C%E6%A6%9C%E5%90%A7/"/>
    <id>https://frezc.github.io/2015/11/19/做一个多网站的动画排行榜吧/</id>
    <published>2015-11-19T15:55:00.000Z</published>
    <updated>2019-03-21T13:48:42.047Z</updated>
    
    <content type="html"><![CDATA[<p>起源是以前看过的一个<a href="http://www.bilibili.com/video/av1184434/" target="_blank" rel="noopener">B站视频</a>。<br>视频里统计了中国的<a href="http://bgm.tv" target="_blank" rel="noopener">Bangumi</a>,日本的<a href="http://www.animesachi.com/" target="_blank" rel="noopener">Sati</a>和欧美的<a href="http://www.animenewsnetwork.com/" target="_blank" rel="noopener">Ann</a>的评分，并取三者平均分进行排名。</p><p>总的来说，这个排名还是挺靠谱的，所以我也想做一个这样的排名，利用网页的形式展示并能够定时地更新。</p><a id="more"></a><h2 id="利用爬虫抓信息"><a href="#利用爬虫抓信息" class="headerlink" title="利用爬虫抓信息"></a>利用爬虫抓信息</h2><p>经某人推荐用了<a href="http://www.scrapy.org" target="_blank" rel="noopener">Scrapy</a>这个库来写爬虫。<br>首先很简单通过每个网站的列表可以得到动画名和url, 由于ann上默认是英文名，所以必须去爬取每个动画的详情页来获得日文名，sati和bgm上都是能直接得到日文名的，所以并没有去爬取详情页。<br>这些存入数据库后就开始下一步</p><h2 id="统一信息"><a href="#统一信息" class="headerlink" title="统一信息"></a>统一信息</h2><p>这是最麻烦的一步了，因为各个站点的命名并不统一，就算你使用了很多的规则去匹配也不可能做到100%准确的，还是需要人工检查。虽然如此，当然能用程序匹配得越多越好了。</p><p>匹配当然需要通过原日文名，于是我观察了一下sati和bgm上的日文命名区别，写了一些规则：</p><ul><li>“ミス・モノクローム -The Animation-“ 在SATI中没有 ‘-‘ 符号</li><li>‘!’ 在SATI上是 ‘！’, 在ann和bgm上不确定</li><li>bgm可能会比sati多个副标题 如 ‘攻殻機動隊ARISE’系列</li><li>标题间的空格可能会不相同</li><li>sati会在剧场版动画名前加上 ‘劇場版’ , 而bgm不会</li><li>sati可能会在标题尾加上括号并有补充内容</li></ul><p>当然这些并不是很全，实际在匹配时用了精确到模糊的查找。</p><ul><li>将原标题中的’劇場版’和前后空格去掉，将一些全角符号替换成半角的</li><li>精确查找，考虑到有括号补充内容的问题，也同样将括号去掉的内容和括号内的内容进行精确的查找</li><li>考虑到标题中的特殊字符存在或有其他替代的不确定性，先将它们使用’_’通配符进行匹配，匹配的符号<br><code>re.compile(ur&#39;[-+・\&#39;!-:.\(\)\s]&#39;)</code> ， 这里还少了个 ‘～’，因为使用正则表达式替换会出现替换两次的问题，我就使用replace函数进行替换了。</li><li>考虑到空格的不确定性，直接使用’%’通配符替换了标题中的所有空格</li><li>考虑到副标题的问题，在标题首尾加上’%’通配符</li><li>最后再找不到就来一次将特殊字符全部替换成’%’的匹配</li></ul><p>前后最多匹配10次，如果在匹配中出现了多个结果就直接手工填充了，<a href="https://github.com/Frezc/Anime-Statistics-Crawl/blob/master/anime_statistics/db_filter/BGMNameFilter.py" target="_blank" rel="noopener">代码</a>。（注意下，最好将查找的字段添加上索引，不然可能要搜索个几分钟）</p><p>除了标题其实还有一个特征值：放送时间。但是通过bgm网页上获取的放送时间是中文形式的，需要去format才能和其他网站匹配。后来一想bgm不还有api吗，看了下api的属性里果然有air_date的标准形式，也可以拿来筛选。</p><h2 id="目前的进度"><a href="#目前的进度" class="headerlink" title="目前的进度"></a>目前的进度</h2><p>第一次用程序匹配完，4000多项数据填了3000多项，结果还是不够理想，毕竟剩下1000项数据也没法手工填。<br>于是我干脆就先删除无用数据吧，sati上评论数少于20的就不去考虑了，删了一圈，并用放送时间进行了一圈匹配（将时间相同的输出，手工填），剩下1000多项数据，其中85项未填，看了下未填项，还真是有很多坑啊。</p><p><img src="/images/2015/11/3870579292.png" alt="bad_name.png"></p><p>（第一条全角空格没考虑，第二条两个网站的字竟然不一样，第三条sati上使用了汉字而bgm上的日文名使用了平假名）</p><p>目前还需要手工把剩下的数据填上了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;起源是以前看过的一个&lt;a href=&quot;http://www.bilibili.com/video/av1184434/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;B站视频&lt;/a&gt;。&lt;br&gt;视频里统计了中国的&lt;a href=&quot;http://bgm.tv&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Bangumi&lt;/a&gt;,日本的&lt;a href=&quot;http://www.animesachi.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sati&lt;/a&gt;和欧美的&lt;a href=&quot;http://www.animenewsnetwork.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ann&lt;/a&gt;的评分，并取三者平均分进行排名。&lt;/p&gt;
&lt;p&gt;总的来说，这个排名还是挺靠谱的，所以我也想做一个这样的排名，利用网页的形式展示并能够定时地更新。&lt;/p&gt;
    
    </summary>
    
      <category term="develop" scheme="https://frezc.github.io/categories/develop/"/>
    
    
      <category term="动漫" scheme="https://frezc.github.io/tags/%E5%8A%A8%E6%BC%AB/"/>
    
      <category term="排行" scheme="https://frezc.github.io/tags/%E6%8E%92%E8%A1%8C/"/>
    
      <category term="anime" scheme="https://frezc.github.io/tags/anime/"/>
    
      <category term="rank" scheme="https://frezc.github.io/tags/rank/"/>
    
  </entry>
  
  <entry>
    <title>自己在Android开发中碰到的问题和解决办法</title>
    <link href="https://frezc.github.io/2015/11/10/%E8%87%AA%E5%B7%B1%E5%9C%A8Android%E5%BC%80%E5%8F%91%E4%B8%AD%E7%A2%B0%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://frezc.github.io/2015/11/10/自己在Android开发中碰到的问题和解决办法/</id>
    <published>2015-11-09T16:51:00.000Z</published>
    <updated>2019-03-21T13:48:42.050Z</updated>
    
    <content type="html"><![CDATA[<p>说起来android我已经半年多没碰过了，这次为了让小组成员会写网络请求和用design库，我还是自己动手写了网络请求的封装类和一个design库的demo。当然，还是不免遇到了一些问题。<br>ps: 因为是前几天的事，也没截图，就随便记录一下啦。</p><a id="more"></a><h2 id="项目升级"><a href="#项目升级" class="headerlink" title="项目升级"></a>项目升级</h2><p>看idea总提示我项目所用的支持库需要升级，于是第一件事当然是把<code>build.gradle</code>里引用库的版本号都改到最新了，还添加了design库的引用，然后就报错了。</p><p>一共有两个错误</p><ol><li>资源重定义：搜了下发现是库里的命名冲突了，我这个项目中是<code>com.zzt.inbox</code>这个库和<code>appcompat-v7</code>间的冲突，前者并不会使用了，于是就直接移除了。</li><li>资源未找到：这个还是因为我只将支持库升级到了<code>23.1.0</code>，而sdk版本还停留在22的原因，将其改为23就ok了。</li></ol><h2 id="Intellij-Idea-15"><a href="#Intellij-Idea-15" class="headerlink" title="Intellij Idea 15"></a>Intellij Idea 15</h2><p>看到idea升级到15了就马上去装了15，打开后直接是一个错误：jre未找到。我顺着错误中给出的路径：<code>\jre\bin\java.exe</code>浏览了一下，发现这个路径就是错误的，实际上是<code>\jre\jre\bin\java.exe</code>。不知道我是不是个例。</p><p>当然解决方法很简单，在系统中安装一个自己的java就ok了，我由于没有安装32位的java所以idea自动使用了自带的java。最后我直接使用64位的idea就完全没问题了。</p><p>idea15的新特性我了解的不多，不过最直观的感受就是打开时稍微快了一点吧。</p><h2 id="Context的空指针问题"><a href="#Context的空指针问题" class="headerlink" title="Context的空指针问题"></a>Context的空指针问题</h2><p>我在一个<code>Activity</code>中在某个变量初始化时调用了<code>this.getApplicationContext()</code>结果出现了空指针问题，当时我把这个函数放在<code>onCreate()</code>里后就好了。</p><p>后来我看到一篇关于<code>Context</code>的<a href="http://blog.csdn.net/guolin_blog/article/details/47028975" target="_blank" rel="noopener">博客</a>，才明白是怎么回事。</p><p><img src="/images/2015/11/74545713.png" alt="context.png"></p><p>从上面这张图可以看出<code>Activity</code>只是一个装饰者，通过源码可以知道<code>getApplicationContext()</code>调用的还是其内部的一个<code>ContextImpl</code>对象。而这个对象是通过<code>attachBaseContext(Context)</code>这个函数传递给<code>Activity</code>的，所以在这个函数调用之前去调用<code>getApplicationContext()</code>自然会出现空指针异常了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说起来android我已经半年多没碰过了，这次为了让小组成员会写网络请求和用design库，我还是自己动手写了网络请求的封装类和一个design库的demo。当然，还是不免遇到了一些问题。&lt;br&gt;ps: 因为是前几天的事，也没截图，就随便记录一下啦。&lt;/p&gt;
    
    </summary>
    
      <category term="develop" scheme="https://frezc.github.io/categories/develop/"/>
    
    
      <category term="android" scheme="https://frezc.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>近期的一些琐事</title>
    <link href="https://frezc.github.io/2015/11/09/%E8%BF%91%E6%9C%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%90%E4%BA%8B/"/>
    <id>https://frezc.github.io/2015/11/09/近期的一些琐事/</id>
    <published>2015-11-08T17:01:00.000Z</published>
    <updated>2019-03-21T13:48:42.051Z</updated>
    
    <content type="html"><![CDATA[<p>近几个星期真是莫名的忙啊，积累了不少事可以写写了，这篇文章就当做一个记录了。</p><a id="more"></a><h2 id="创新实践课的安卓项目"><a href="#创新实践课的安卓项目" class="headerlink" title="创新实践课的安卓项目"></a>创新实践课的安卓项目</h2><p>这些项目对于个人来说并不是十分积极去参与的，不过既然都当了组长还是要做好的。带着其他几个完全不懂的还是要干很多事啊。于是呢，我就干干设计app结构，设计api，写文档，然后写服务端（另一组不会写api，我就自己做了），现在还要操心app这边的网络请求管理。。</p><p>服务器端被某人推荐用Laravel+jwt+dingo去写了。laravel框架还是非常方便的，对于我这种没写过php但知道服务器端如何处理请求的人来说看完文档也就会做了；dingo这个插件并没有某人说的那么方便，虽然能直接返回数据自动生成json，但会像下面这样：</p><pre><code>{Entity: {&quot;xx&quot;: &quot;xx&quot;, ...}}</code></pre><p>在外面多嵌套了一层，这样在app上解析时就不太方便了，于是最终还是使用<code>response()-&gt;json()</code>的方式。</p><h2 id="机器视觉课的小组项目"><a href="#机器视觉课的小组项目" class="headerlink" title="机器视觉课的小组项目"></a>机器视觉课的小组项目</h2><p>对于这种课都要做个项目我表示很吃惊，说实话我宁愿考试呢。其中翻译一篇长的要死的论文+做ppt就算了，还要小组做项目，我还是挺后悔选这门课的。不过既然不能换了，那还是要好好做的。</p><p>项目的题目是通过摄像头来监视交通系统，我选这个主要还是因为没有现成的加上挺有意思这两点吧。不过这样我的组员表示完全不懂了，想想到最后应该还是要我来设计算法吧。</p><p>这个项目我觉得还是挺有意思的，在十字路口通过双摄像头图像识别车辆的三维空间信息，然后就能十分精确的判断是否出现事故了，识别误差主要在图像到三维信息上。这个项目其实就一个问题，如何通过摄像机图像判断车辆中心点和矩形区域。这个我觉得可以使用模板对比的方法实现，但是对于一个尺寸的车辆还好，车辆模型一多工程量就会非常大了，总之还是有取巧的方法的，能给老师看看就够了。</p><h2 id="软考"><a href="#软考" class="headerlink" title="软考"></a>软考</h2><p>吐槽下周六的软考吧。<br>基础知识考的真是泛，计组、操作系统、数据库、软件工程、编译原理、设计模式、数据结构、算法分析、计网，我感觉以上全都有考到，对了还有门英语。虽然多，但都是选择题，应该能及格吧。</p><p>应用技术的考试我觉得就有意思多了，考的是系统设计（数据流图）、数据库设计（ER图）、软件设计（用例图、类图）、算法（很简单的求最长公共子串），还有道拿策略模式说话，实际就是简单的面向对象的多态编程。总的来说题还是出的不怎么样，有明显错误。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>能把薄膜键盘敲出机器键盘的声音的室友早上8点起来敲代码这事已经在督促我早睡早起了！<br>不然早上10点前我肯定睡不着了。（わらい）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近几个星期真是莫名的忙啊，积累了不少事可以写写了，这篇文章就当做一个记录了。&lt;/p&gt;
    
    </summary>
    
      <category term="essay" scheme="https://frezc.github.io/categories/essay/"/>
    
    
  </entry>
  
  <entry>
    <title>typecho上的第一篇博客</title>
    <link href="https://frezc.github.io/2015/11/02/my-first-blog/"/>
    <id>https://frezc.github.io/2015/11/02/my-first-blog/</id>
    <published>2015-11-02T02:20:00.000Z</published>
    <updated>2019-03-21T13:48:42.039Z</updated>
    
    <content type="html"><![CDATA[<p>自己撸了个域名后就决定换个地方写博客了，以前的博客<a href="https://frezc.github.io">点这访问</a>。<br>关于为什么要换地写呢，主要还是因为电脑装win10的时候把d盘格式化掉了，原来配置了挺长时间的博客配置（改了文件能用https访问，还用七牛做了国内的cdn）都没了，我也没劲再来一遍了，于是就干脆试试typecho吧。</p><p>从上学期Hackthon比赛后我就没怎么写过Android了，一直在学cocos2d-js和unity，毕竟我对游戏开发还是比较感兴趣的。<br>现在只用Unity了，毕竟比起cocos包含了很多方便的工具，自己做做游戏的话会省事很多。<br>近期为了创新实践的项目还写了个api服务器，不得不说Laravel框架在熟悉了后还是十分简单的，对于我这种没写过php的人都能写的行云流水啊。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自己撸了个域名后就决定换个地方写博客了，以前的博客&lt;a href=&quot;https://frezc.github.io&quot;&gt;点这访问&lt;/a&gt;。&lt;br&gt;关于为什么要换地写呢，主要还是因为电脑装win10的时候把d盘格式化掉了，原来配置了挺长时间的博客配置（改了文件能用https访问
      
    
    </summary>
    
      <category term="essay" scheme="https://frezc.github.io/categories/essay/"/>
    
    
  </entry>
  
  <entry>
    <title>关于高级弹幕的一点心得和看法</title>
    <link href="https://frezc.github.io/2015/07/20/Danmaku-code/"/>
    <id>https://frezc.github.io/2015/07/20/Danmaku-code/</id>
    <published>2015-07-20T08:33:33.000Z</published>
    <updated>2019-03-21T13:48:42.024Z</updated>
    
    <content type="html"><![CDATA[<p>假期实在没事做，参加了b站的第二届弹幕大赛玩玩，就做了个围住刀哥（这个审核不让过，就改名成ChatNoir了，<a href="http://www.bilibili.com/video/av2593897/" target="_blank" rel="noopener">连接</a>）。<br>这个游戏的逻辑很快就写好了，然后UI花了我几天时间。总之还是花了不少时间的，而且碰到了不少坑(未在文档里提及)，下面先谈谈这些坑。</p><p>###坑<br>首先我想吐槽的是b站提供的文档实在是糟糕，很多重要的api提都没提过，要自己去查ActionScript的api文档。<br>还有虽然说是ECMAScript的标准，但有些地方却还是没有完美实现，比如结尾的分号省略会报错，函数的优先级问题等。<br>下面说几点具体的:</p><ul><li>interval的第一个参数的函数内部不能声明变量，如果有声明变量的行为会没有任何提示的停止执行下去。</li><li>函数只能在声明后调用，而ECMAScript中对于函数声明会提前的。</li><li>数字数组的返回值不是数字类型。这样就有一个问题，数组下标不能嵌套，如<code>a[b[0]]</code>这里由于<code>b[0]</code>是字符串，返回的就是一个<code>undefined</code>了，如果要嵌套得<code>a[parseInt(b[0])]</code>这样。</li><li>对<code>CommentField</code>修改属性时，<code>fontsize</code>要放在<code>textColor</code>之前，不然后者会失效。这里的理由我也不清楚。</li></ul><p>###其他的建议和问题</p><ol><li><p>==元素的优先级==: 虽然在文档里没提到，这里面还是有绘制层次和优先级的。一般来说元素按添加进parent的顺序进行绘制，如果创建的时候没有带这个参数，那么父元素就是<code>$.root</code>，想修改绘制顺序可以调用父元素的<code>setChildIndex(obj, index)</code>进行修改。</p></li><li><p>==绘图层次==: 利用好Canvas元素来将你的视图分层，每块区域都最好以同一个Canvas为父元素，由于元素的位置是相对于父元素定义的，这样在进行一些动画的时候就会方便很多。</p></li><li><p>==鼠标的点击事件==: 我只发现Button这一个元素能响应鼠标的点击事件。如果要在你的弹幕中响应的话，可以在可能点击的区域放置一个透明的Button。还有另一种方法是使你想要响应点击事件的元素继承于Button，这种方法有一个好处：只有鼠标在该元素内部点击才响应，可以配合Shape进行一些复杂区域的响应判定而不用自己判断区域；当然有一个坏处：继承的元素同样会继承Button的阴影动画，这个我不知道怎么去掉，不过你背景是黑色的话这个不碍事。</p></li><li><p>==得到鼠标位置==：这个不需要响应事件，每个元素都有mouseX和mouseY属性，这两个属性代表了鼠标当前相对于该元素的位置。</p></li><li><p>==加载图片==：想要在弹幕里显示图片有两种方法，一个是矢量表示，一个是位图表示。有人写过将图片矢量化的工具，想显示分辨率比较高的图片这种方法比较合适。另一种就是将每个像素值放到代码里，利用<code>BitmapData</code>和<code>Bitmap</code>来显示，这种方法如果有as的开发环境就十分简单了，只要调用已有的api将图片的<code>bytearray</code>进行BASE64编码，将结果放到代码里，使用的时候解码调用<code>setPixels</code>就行了，或者直接将每个像素值放到一个数组里再到代码里利用<code>setPixel</code>一个个设置，后者应该会慢很多吧。</p></li></ol><p>###自己的一些看法<br>高级弹幕的api还不是很完善，很多地方用的都是ActionScript里的东西，没有封装好。这样对于html5的播放器来说不是个好消息，如果有谁能完善这方面的话就好了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;假期实在没事做，参加了b站的第二届弹幕大赛玩玩，就做了个围住刀哥（这个审核不让过，就改名成ChatNoir了，&lt;a href=&quot;http://www.bilibili.com/video/av2593897/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
      
    
    </summary>
    
      <category term="develop" scheme="https://frezc.github.io/categories/develop/"/>
    
    
      <category term="game" scheme="https://frezc.github.io/tags/game/"/>
    
      <category term="bilibili" scheme="https://frezc.github.io/tags/bilibili/"/>
    
      <category term="弹幕" scheme="https://frezc.github.io/tags/%E5%BC%B9%E5%B9%95/"/>
    
      <category term="ActionScript" scheme="https://frezc.github.io/tags/ActionScript/"/>
    
  </entry>
  
  <entry>
    <title>使用intellij的模板（live template）</title>
    <link href="https://frezc.github.io/2015/06/07/use-intellij-live-template/"/>
    <id>https://frezc.github.io/2015/06/07/use-intellij-live-template/</id>
    <published>2015-06-07T12:42:45.000Z</published>
    <updated>2019-03-21T13:48:42.046Z</updated>
    
    <content type="html"><![CDATA[<p>intellij的live template功能十分强大，可以简化很多重复的代码，可以说是使用好intellij必会的一个东西。</p><p>##什么是live template<br>live template相当于一个代码块的缩写<br>在编辑代码的过程中按下<code>Ctrl+j</code>可以查看当前上下文中可用的所有模板，下面是一些可能常用的模板（可以不用上面的快捷键，直接打出缩写会出现提示）。<br><strong>psvm</strong>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>psfi</strong>、<strong>psfs</strong>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String</span><br></pre></td></tr></table></figure></p><p><strong>sout</strong>、<strong>soutv</strong>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println($END$);</span><br><span class="line">System.out.println(<span class="string">"$EXPR_COPY$ = "</span> + $EXPR$); <span class="comment">//这里是指打印类中的一个变量</span></span><br></pre></td></tr></table></figure></p><p>##live template是如何生成的<br>在<code>Settings -&gt; Editor -&gt; Code Style -&gt; Live Templates</code>里可以查看并修改所有的模板，当然也能自己创建。<br>我们先看看<strong>output</strong>下的<strong>soutm</strong>是怎么写的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"$CLASS_NAME$.$METHOD_NAME$"</span>);</span><br></pre></td></tr></table></figure></p><p>这个模板是用来生成打印当前类和方法名的，这里面有两个变量<strong>$CLASS_NAME$</strong>和<strong>$METHOD_NAME$</strong>，点击右边的<strong>Edit variables</strong>来看看它们是怎么定义的。</p><hr><p>在<strong>Edit Template Variables</strong>对话框中可以看到这两个变量，通过每列的标题就知道是干什么的了，这里主要注意两点：</p><ol><li>变量是有顺序的，idea会按顺序来生成这些变量，所以注意依赖关系。</li><li>Expression栏可以填双引号包含的字符串、其他已经定义的变量和预定义的函数，从下拉列表里可以选择预定义的函数。函数说明请参考<a href="https://www.jetbrains.com/idea/help/edit-template-variables-dialog.html#functions" target="_blank" rel="noopener">官方文档</a></li></ol><p>在预定义函数中有个十分强大的函数<code>groovyScript(&quot;groovy code&quot;)</code>，它可以执行groovy语句。比如模板<strong>soutp</strong>:<code>System.out.println($FORMAT$);</code>这里的变量<code>$FORMAT$</code>对应的Expression是<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groovyScript(<span class="string">"'\"' + _1.collect &#123; it + ' = [\" + ' + it + ' + \"]'&#125;.join(', ') + '\"'"</span>, methodParameters())</span><br></pre></td></tr></table></figure></p><p>稍微解释下这句，方法<code>methodParameters()</code>返回了当前方法参数的数组，这个数组对应着前面groovy语句中的_1，然后遍历_1，生成类似<code>&quot;xxx = [&quot; + xxx + &quot;]...</code>的java代码，多个之间使用<code>,</code>隔开，这句实际生成的代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"user = ["</span> + user + <span class="string">"], isSave = ["</span> + isSave + <span class="string">"]"</span>);</span><br></pre></td></tr></table></figure></p><p>##自定义live template<br>这里我自定义了一个live template<br><strong>lim</strong>:<code>Log.i(&quot;$END$&quot;,&quot;$CLASS_NAME$.$METHOD_NAME$:&quot; + $METHOD_PARAMETERS$);</code><br>这个模板是用来生成将当前方法加参数名与值打印到Log的方法。其中<br><strong>$CLASS_NAME$</strong>:<code>className()</code><br><strong>$METHOD_NAME$</strong>:<code>methodName()</code><br><strong>$METHOD_PARAMETERS$</strong>:<code>groovyScript(&quot;&#39;\&quot;&#39; + _1.collect { it + &#39; = [\&quot; + &#39; + it + &#39; + \&quot;]&#39;}.join(&#39;, &#39;) + &#39;\&quot;&#39;&quot;, methodParameters())</code><br><strong>$END$</strong>:上面的变量生成结束后光标停留位置<br>建议把<strong>Skip if defined</strong>勾选，这样就不会询问你是否要更改上面的变量了。</p><p>####优化<br>上面的模板在输入完TAG后还要手动把光标移到语句尾，显得很麻烦，有没有办法再输入完TAG后回车直接进入下一行呢？ 当然是可以的，修改成如下即可：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Log.i(<span class="string">"$TAG$"</span>,<span class="string">"$CLASS_NAME$.$METHOD_NAME$:"</span> + $METHOD_PARAMETERS$);</span><br><span class="line">$END$</span><br></pre></td></tr></table></figure></p><p>新增的<strong>$TAG$</strong>变量的Expression可以填你的初始值，如<code>&quot;Test&quot;</code>，如果你需要修改就不要勾选<strong>Skip if defined</strong>。这样在输入玩TAG后直接回车就能跳转到下一行了，是不是十分方便。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://frezc.github.io/2015/06/07/use-intellij-live-template/lim.png" alt="lim" title>                </div>                <div class="image-caption">lim</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;intellij的live template功能十分强大，可以简化很多重复的代码，可以说是使用好intellij必会的一个东西。&lt;/p&gt;
&lt;p&gt;##什么是live template&lt;br&gt;live template相当于一个代码块的缩写&lt;br&gt;在编辑代码的过程中按下&lt;cod
      
    
    </summary>
    
      <category term="develop" scheme="https://frezc.github.io/categories/develop/"/>
    
    
      <category term="intellij idea" scheme="https://frezc.github.io/tags/intellij-idea/"/>
    
      <category term="live template" scheme="https://frezc.github.io/tags/live-template/"/>
    
  </entry>
  
  <entry>
    <title>用KJFrame的KJHttp请求无法加载图片</title>
    <link href="https://frezc.github.io/2015/05/27/kjframe-http-loading-bitmap/"/>
    <id>https://frezc.github.io/2015/05/27/kjframe-http-loading-bitmap/</id>
    <published>2015-05-26T16:32:54.000Z</published>
    <updated>2019-03-21T13:48:42.038Z</updated>
    
    <content type="html"><![CDATA[<p>KJFrame框架对Http请求和sqlite的ORM封装的挺简单实用的，所以前几天的hackathon比赛就用了这个框架，不过最后用KJHttp进行请求后，发现<code>onSuccess(Bitmap t)</code>接口似乎不会调用，最后也没测试时间了也就没解决这个问题了。</p><p>回过头来看看KJFram的源码发现<br><figure class="highlight java"><figcaption><span>FormRequest.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deliverResponse</span><span class="params">(Map&lt;String, String&gt; headers, <span class="keyword">byte</span>[] response)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mCallback.onSuccess(headers, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>和volley相同的方式调用<code>HttpCallBack</code>的<br><figure class="highlight java"><figcaption><span>HttpCallBack.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Map&lt;String, String&gt; headers, <span class="keyword">byte</span>[] t)</span> </span>&#123;</span><br><span class="line">    onSuccess(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(<span class="keyword">byte</span>[] t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">        onSuccess(<span class="keyword">new</span> String(t));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String t)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Bitmap t)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><br>很明显，这里你就算重写了<code>onSuccess(Bitmap t)</code>也不会调用。</p><hr><p>看过源码后才发现有个<code>KJBitmap</code>类专门用来处理图片请求，并且使用的是<code>BitmapCallBack</code><br><figure class="highlight java"><figcaption><span>KJBitmap.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 真正去加载一个图片</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doDisplay</span><span class="params">(<span class="keyword">final</span> View imageView, <span class="keyword">final</span> String imageUrl,</span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">final</span> Drawable loadBitmap,</span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">final</span> Drawable errorBitmap, <span class="keyword">final</span> BitmapCallBack callback)</span> </span>&#123;</span><br><span class="line">       checkViewExist(imageView);</span><br><span class="line"></span><br><span class="line">       imageView.setTag(imageUrl);</span><br><span class="line"></span><br><span class="line">       BitmapCallBack mCallback = <span class="keyword">new</span> BitmapCallBack() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPreLoad</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   callback.onPreLoad();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (imageUrl.equals(imageView.getTag())) &#123;</span><br><span class="line">                   doSuccess(imageView, bitmap, loadBitmap);</span><br><span class="line">                   <span class="keyword">if</span> (callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">                       callback.onSuccess(bitmap);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">               doFailure(imageView, errorBitmap);</span><br><span class="line">               <span class="keyword">if</span> (callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   callback.onFailure(e);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFinish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   doLoadingViews.remove(imageView);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   callback.onFinish();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (imageUrl.startsWith(<span class="string">"http"</span>)) &#123;</span><br><span class="line">           displayer.get(imageUrl, width, height, mCallback);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">new</span> DiskImageRequest().load(imageUrl, width, width, mCallback);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><hr><p>最后倒是想吐槽一下，把HttpCallBack里得到的<code>byte[]</code>数据转换成<code>Bitmap</code>调用<code>onSucess(Bitmap t)</code>不行吗。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;KJFrame框架对Http请求和sqlite的ORM封装的挺简单实用的，所以前几天的hackathon比赛就用了这个框架，不过最后用KJHttp进行请求后，发现&lt;code&gt;onSuccess(Bitmap t)&lt;/code&gt;接口似乎不会调用，最后也没测试时间了也就没解决这
      
    
    </summary>
    
      <category term="develop" scheme="https://frezc.github.io/categories/develop/"/>
    
    
      <category term="android" scheme="https://frezc.github.io/tags/android/"/>
    
      <category term="KJFrame" scheme="https://frezc.github.io/tags/KJFrame/"/>
    
      <category term="http" scheme="https://frezc.github.io/tags/http/"/>
    
      <category term="bitmap" scheme="https://frezc.github.io/tags/bitmap/"/>
    
  </entry>
  
  <entry>
    <title>对于日本动漫的一些感想</title>
    <link href="https://frezc.github.io/2015/05/19/japan-anime-reflections/"/>
    <id>https://frezc.github.io/2015/05/19/japan-anime-reflections/</id>
    <published>2015-05-18T16:50:42.000Z</published>
    <updated>2019-03-21T15:38:20.213Z</updated>
    
    <content type="html"><![CDATA[<p><em>这篇是作为自己的毛概作业写的，个人的一点拙见</em></p><p>　　这两年随着<a href="http://www.bilibili.com/" target="_blank" rel="noopener">bilibili</a>这类弹幕网站的发展，ACG文化似乎也更多的走进了大众的视野，人们对日本动漫的认识也不像几年前那样被问到看什么动画时回答的永远是那么几个：“火影，海贼，柯南，……”。现在的有越来越多的人知道了还有新番 这个东西，这个从现在各大网站的新番点击量就可以看出，现在挺火的《FATE/STAY NIGHT -UBW-》在b站上每集都有150万左右的点击，在两年前的新番动画可没这么多人看。当然在这里不仅仅讨论新番，整个日本的动漫为何这么受全世界欢迎呢，我就作为一个爱好者发表下自己所了解的东西。另外我也会谈谈前段时间文化部禁播了很多动画这事。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://frezc.github.io/2015/05/19/japan-anime-reflections/rin.jpg" alt="凛" title>                </div>                <div class="image-caption">凛</div>            </figure></p><p>　　在很多日本动漫中会出现“日本变成殖民地，改名11区” ，这样日本被灭的设定，因为太多见了，所以每次都会有人来吐槽：“日本又灭亡了啊”。去年的夏季番《东京残响》 甚至还描写了少年制造恐怖袭击的情节，这些情节我想在国内是不可能让我们看到的；还有《回转企鹅罐》故事的核心围绕着<a href="https://www.baidu.com/s?ie=UTF-8&amp;wd=%E4%B8%9C%E4%BA%AC%E5%9C%B0%E9%93%81%E6%AF%92%E6%B0%94%E4%BA%8B%E4%BB%B6" target="_blank" rel="noopener">东京地铁毒气事件</a>展开，可谓是挖了日本人的一个伤疤。日本动漫这种自由表达的风格肯定是在国内受欢迎的一点，毕竟都喜欢看看不同的东西。在13年有部火遍全球的动画《进击的巨人》，先不谈优秀的制作，这部动画这么火其实很明显，一是符合大众口味的类型，它和火影海贼其实可以分为一类，都是热血动漫，这类在国内的观众可是非常多的，第二就是比较血腥的情节了，对平时没接触过的人来说反而觉得更新颖 ，大众都喜欢跟风的特性，之后这类动画就变的挺受欢迎了(像去年的《火星异种》、《东京食尸鬼》等)，当然今年都进了文化部的黑名单。（说起来宫崎骏还表明过自己想制作《寄生兽》的动画，不过很难想象吉卜力如何来改编这种血腥暴力的漫画）不单单是自由，日本动漫几乎什么类型都会涉及，对于每个人来说总会有自己喜欢的。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://frezc.github.io/2015/05/19/japan-anime-reflections/himari.gif" alt="himari" title>                </div>                <div class="image-caption">himari</div>            </figure></p><p>　　有很多热血战斗类型的动漫主人公都是初中生或高中生并非偶然，而是编剧认真考虑过的，有个词叫中二病 ，对于少年总会幻想过打败坏蛋然后拯救世界的情节，将年龄设为这个时期的少年也是能引起一定的共鸣吧。不仅仅是这类，有很多动漫可谓是道出了人心中的疙瘩。去年有部动画叫《乒乓》，虽然是运动题材的动画，但是讲的并不是主角多么努力然后赢得冠军的故事，而是指出挺现实的一点“天赋比努力重要”，很多人能从片中的角色看到自己的身影吧，这里有个挺不错的评论<br><blockquote><p>我认同 @Lawrence Li的说法，天赋比努力重要。但我不认同这是这部影片所传递出来得价值观，我觉得，最重要的是要找到属于自己的路，世界冠军也好，球馆教练也罢，本质上都相同，都只是世界上的某一个职业。钱啊、名声啊、荣誉啊、尊严啊，都是超出乒乓球之外的东西，这才是如梦幻泡影，如露亦如电。当你热切的追求某个事物，而它又让你感到深深的疲惫与痛苦时，那一定是走错了路。恶魔嫉妒星野的一切，他打的是嫉妒。龙一练球时从没笑过，他在打家人的尊严。孔文革因犯错被调整，他打的是忿恨。星野没觉悟之前，打的是自负。你会发现没人在打乒乓球，都在打虚妄，不自觉的就陷入到里面。</p><p>直到失败让他们意识到，原来我只是想打球啊。于是，有人放下了球，有人捡起了球。</p><p>无所谓天赋，时刻认清自己是谁，自己在干什么，这才是最重要的。</p><p>像我等天资平庸之辈，凭着努力达到自己的上限，就够了。</p><footer><strong>温新宇</strong><cite><a href="http://www.zhihu.com/question/24111534" target="_blank" rel="noopener">如何解读《乒乓》这部动画？</a></cite></footer></blockquote><br>和其他媒介一样，正是有能让人产生共鸣的东西，才能吸引人在其中。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://frezc.github.io/2015/05/19/japan-anime-reflections/pingpong.jpg" alt="乒乓" title>                </div>                <div class="image-caption">乒乓</div>            </figure></p><p>　　提起日本动漫，就不得不谈谈科幻这类型的作品。攻壳机动队(Ghost in the Shell)知道的人可能不多，但是黑客帝国(Matrix)大家都耳熟能详吧，在wiki上能发现这样一句话：<br><blockquote><p>Japanese director Mamoru Oshii’s Ghost in the Shell was a strong influence.[21] Producer Joel Silver has stated that the Wachowskis first described their intentions for The Matrix by showing him that anime and saying, “We wanna do that for real”.</p><footer><strong>The Matrix (franchise)</strong><cite><a href="http://en.wikipedia.org/wiki/The_Matrix_(franchise)" target="_blank" rel="noopener">en.wikipedia.org/wiki/The_Matrix_(franchise)</a></cite></footer></blockquote><br>不仅是黑客帝国，近年来的《盗梦空间》 等美国大片都能看到日本动漫的身影，卡梅隆也说过要将日本漫画《铳梦》拍成电影（希望他没忘记）。科幻类型的小说是适合做成动画的，事实也正是如此，比起在电影中用各种特技支撑的场景，动画中能表现地更自然宏大。日本的科幻动画正是一大特色，一直以来都很不少的fans，像高达这样的超级机器人影响力不小，13年美国有部电影《环太平洋》在片尾向富野由悠季（《机动战士高达》创始人）、永进豪（《魔神Z》动画创始人）等人致敬。作为一个科幻fans，如果有人推荐我现在的好莱坞科幻大片的话，我肯定会向他推荐更值得一看的日本科幻动画(《攻壳机动队》或者12年的《来自新世界》)。<br>关于日本科幻可以看看这个公开课–<a href="http://www.bilibili.com/video/av836618/index_32.html" target="_blank" rel="noopener">科幻概论</a>。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://frezc.github.io/2015/05/19/japan-anime-reflections/shinsekai.jpg" alt="自新世界" title>                </div>                <div class="image-caption">自新世界</div>            </figure></p><p>　　接下来说说禁播动漫的事，前段时间文化部禁了一堆日本动漫，原因是暴力、凶杀、色情和恐怖的动漫作品，引起了很多爱好者不满。仔细看看公布的一些名单，基本上带有负面情绪、见血的、有些许裸露镜头的，总的来说就是不适合小孩子看的都不行，实际上也是如此。在日本，虽然这些动漫作为TV动画应该都是全年龄的，但是由于并不是面向低年龄人群，所以都是作为深夜档播放，在网上看到这么一种说法：<br><blockquote><p>　　黄金档”和“深夜档”。一般观念认为，黄金档多是商业快餐作品，而深夜档则是注重暴力和挑逗、大打“擦边球”的给成人看的动画。其实这种说法也不尽然。实际上，日本电视动画经过多年的发展，如今已形成一套关于档期分段的基本框架：晚上8点半至10点半是“黄金时段”，播放面向青少年或老少咸宜的动画；深夜时分播放面向高中及以上至成人的动画；周六、日上午播放面向儿童的动画。作品年龄区十分明晰，而且实行多年。</p></blockquote><br>曾近就有因不适合在黄金档播放而被举报后调到深夜档播放的动画的例子，所以即使在日本，这些动画也并不是完全没有限制。而到了中国，电视上是不可能放了，就有了很多视频网站买了播放权 让人免费看，在中国这个网络如此普及，从小学就开始上网的国家 ，把这些动画放在网络上暴露给孩子我也觉得不妥。但是封禁这样的处理并不好，一是不利于国内动漫产业发展，毕竟从现在国内动漫发展看，基本上还是学日本来的，如果能在这方面和日本加深关系，多多学习还是有好处的；二是这样做的意义只有一个，就是能防止孩子找动画看而无意点到这些动漫，毕竟对于有心人，总能下载到的。我认为比起公开封禁，不如监督各个视频网站做好信息过滤（对于不适合孩子看的内容能实行会员制），<del>对于有<strong>网络视听许可证</strong>的网站来说，也不可能不配合吧(笑)</del>。对于这件事，文化部处理地不好，大众的反应也不能说正确，但是从中有能让人反思的事：“我们是不是也应该将制作成年人喜爱的动画”。对于这事现在很多网络公司已经行动起来了，不过政府也仅是以“国产动画”的名义支持。另外政府也应该早点把各媒体的分级制度制订好了，有了明确的制度引导才能有正确合理的判断。</p><p>　　说到底，动漫、电影、小说之类的本就没有太大差别，动漫受欢迎也是正常的，只是有了更多人接受了这种表现方式，一个好的作品无论是改编成什么都会很好看的（当然前提是能还原）。除了宫崎骏的动画，何不换换口味看看今敏、大友克洋、新海诚等导演的动画呢？</p><p>　　写完后发现没提到过gal相关的，不过思来想去gal的改编其实都不太适合大众，哪怕是key社，也不能说所有人都有可能会喜欢吧。Narcissu倒是适合所有人，不过它不是gal哦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;这篇是作为自己的毛概作业写的，个人的一点拙见&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;　　这两年随着&lt;a href=&quot;http://www.bilibili.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bilibili&lt;/a&gt;这类弹幕网站的发展，ACG
      
    
    </summary>
    
      <category term="essay" scheme="https://frezc.github.io/categories/essay/"/>
    
    
      <category term="动漫" scheme="https://frezc.github.io/tags/%E5%8A%A8%E6%BC%AB/"/>
    
      <category term="感想" scheme="https://frezc.github.io/tags/%E6%84%9F%E6%83%B3/"/>
    
      <category term="日本动漫" scheme="https://frezc.github.io/tags/%E6%97%A5%E6%9C%AC%E5%8A%A8%E6%BC%AB/"/>
    
  </entry>
  
  <entry>
    <title>Gradle的preDexDebug错误的解决办法(大概)</title>
    <link href="https://frezc.github.io/2015/05/16/solve-preDexDebug/"/>
    <id>https://frezc.github.io/2015/05/16/solve-preDexDebug/</id>
    <published>2015-05-15T17:47:14.000Z</published>
    <updated>2019-03-21T13:48:42.045Z</updated>
    
    <content type="html"><![CDATA[<p>今天把项目pull下来然后用intellij执行时出现了以下的错误提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error:Gradle: Execution failed for task &apos;:app:preDexDebug&apos;.</span><br><span class="line">&gt; com.android.ide.common.process.ProcessException: org.gradle.process.internal.ExecException: Process &apos;command &apos;C:\Program Files\Java\jdk1.8.0_40\bin\java.exe&apos;&apos; finished with non-zero exit value 1</span><br></pre></td></tr></table></figure></p><p>因为没有错误提示，只好去网上找解决方法。这时还是不得不感叹stackoverflow这网站的强大啊。</p><p>两个小时内试了n多方法都没成效，其中也试过把项目回滚，发现即使回滚也会有这个错误，很明显这不是项目本身的问题，大概是gradle哪里出现了问题。</p><hr><p>总之，两个小时后在一次电脑当机重启后就莫名其妙地好了，我这里就讲讲我改过什么吧，也许可以当作参考。</p><ul><li>升级sdk的build-tools和support library到最新(反正全部保持最新)</li><li>项目里引用了一个库，是以project形式引用的，将这个库的build.gradle里的compileSdkVersion之类的改成和项目app相同。</li><li>将项目和这个库的dependencies引用的库全部改成最新的，v4、v7这些intellij会出现提示，而CardView这些不会，需要手动改。</li><li>点击Build-Clean Project。(这个没关机前我就试过几遍，还是有错误)</li><li>终极大法，重启电脑。(我是电脑当掉了才重启，不然可能还要折腾很久)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天把项目pull下来然后用intellij执行时出现了以下的错误提示&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;
      
    
    </summary>
    
      <category term="develop" scheme="https://frezc.github.io/categories/develop/"/>
    
    
      <category term="android" scheme="https://frezc.github.io/tags/android/"/>
    
      <category term="intellij idea" scheme="https://frezc.github.io/tags/intellij-idea/"/>
    
      <category term="gradle" scheme="https://frezc.github.io/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>如何结合Volley和Gson的使用</title>
    <link href="https://frezc.github.io/2015/05/03/use-Volley-and-Gson/"/>
    <id>https://frezc.github.io/2015/05/03/use-Volley-and-Gson/</id>
    <published>2015-05-03T10:33:33.000Z</published>
    <updated>2019-03-21T13:48:42.045Z</updated>
    
    <content type="html"><![CDATA[<p>Volley和Gson都是谷歌开发的java库，一个处理网络请求，一个处理json，对于网络app来说这2个经常会一起使用，但谷歌似乎不考虑开发两者结合使用的api，所以就需要我们自己来写了。</p><h2 id="自定义Request"><a href="#自定义Request" class="headerlink" title="自定义Request"></a>自定义Request</h2><p>为了使请求能设置request体的参数，然后直接返回我们需要的对象，这时候需要重写Request，谷歌给出了一个重写Request的示例：<br><figure class="highlight java"><figcaption><span>GsonRequest</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GsonRequest</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Request</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; clazz;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; headers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Listener&lt;T&gt; listener;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Make a GET request and return a parsed object from JSON.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url URL of the request to make</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz Relevant class object, for Gson's reflection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headers Map of request headers</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GsonRequest</span><span class="params">(String url, Class&lt;T&gt; clazz, Map&lt;String, String&gt; headers,</span></span></span><br><span class="line"><span class="function"><span class="params">            Listener&lt;T&gt; listener, ErrorListener errorListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Method.GET, url, errorListener);</span><br><span class="line">        <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">        <span class="keyword">this</span>.headers = headers;</span><br><span class="line">        <span class="keyword">this</span>.listener = listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getHeaders</span><span class="params">()</span> <span class="keyword">throws</span> AuthFailureError </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> headers != <span class="keyword">null</span> ? headers : <span class="keyword">super</span>.getHeaders();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deliverResponse</span><span class="params">(T response)</span> </span>&#123;</span><br><span class="line">        listener.onResponse(response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Response&lt;T&gt; <span class="title">parseNetworkResponse</span><span class="params">(NetworkResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String json = <span class="keyword">new</span> String(</span><br><span class="line">                    response.data,</span><br><span class="line">                    HttpHeaderParser.parseCharset(response.headers));</span><br><span class="line">            <span class="keyword">return</span> Response.success(</span><br><span class="line">                    gson.fromJson(json, clazz),</span><br><span class="line">                    HttpHeaderParser.parseCacheHeaders(response));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.error(<span class="keyword">new</span> ParseError(e));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonSyntaxException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.error(<span class="keyword">new</span> ParseError(e));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>如果需要设置参数，重写getParams()即可。</p><h2 id="自定义数组json-Request"><a href="#自定义数组json-Request" class="headerlink" title="自定义数组json Request"></a>自定义数组json Request</h2><p>这里如果直接用<code>List&lt;MyClass&gt;</code>来作为 T 的类型是不对的，由于java的类型擦除机制，你从<code>List&lt;MyClass&gt;</code>获得的Class类是不包含<code>MyClass</code>信息的，gson解析时会抛出错误。</p><p>很明显这个GsonRequest无法处理数组形式的json，但是我又想用一个通用的类来处理数组形式的json，要怎么改呢。<br>我这里提出几个方案供参考。</p><ol><li><p>继承<code>Request&lt;String&gt;</code><br>在<code>parseNetworkResponse</code>里得到的response转换为字符串后放到<code>Response.success()</code>函数中返回<br>然后在<code>deliverResponse</code>函数里将字符串转换为对象然后调用接口函数。<br>不过我个人不喜欢这种做法，因为<code>deliverResponse</code>是在UI线程中处理的，解析非常大的json时可能会卡ui，我更喜欢把json的处理放在在工作线程中处理的<code>parseNetworkResponse</code>函数中。</p></li><li><p>分别处理<br>我是将普通json和数组json分开处理，对于数组类型我传入的参数为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GsonRequest(Context context, <span class="keyword">int</span> method, String url, Class&lt;T&gt; clazz, Map&lt;String,String&gt; headers,</span><br><span class="line">                       OnListResponseListener&lt;T&gt; listener, Response.ErrorListener errorListener)</span><br></pre></td></tr></table></figure><p>这里我自定义了一个接口<code>OnListResponseListener&lt;T&gt;</code>，用于传递解析好的数组对象，<code>Context</code>对象是为了得到<em>MainLooper</em>，而使回调函数能在ui线程中进行，方便更新ui。<br>然后设置一个数组标记<code>isArray = true</code></p><figure class="highlight java"><figcaption><span>GsonRequest重写的2个方法</span><a href="https://github.com/Frezc/BangumiTimeMachine/blob/master/app/src/main/java/frezc/bangumitimemachine/app/network/http/GsonRequest.java" target="_blank" rel="noopener">GsonRequest.java</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Response&lt;T&gt; <span class="title">parseNetworkResponse</span><span class="params">(NetworkResponse networkResponse)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String json;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"gzip"</span>.equals(networkResponse.headers.get(<span class="string">"Content-Encoding"</span>))) &#123;</span><br><span class="line">                json = NetWorkTool.GZipDecoderToString(networkResponse.data);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                json = <span class="keyword">new</span> String(networkResponse.data,</span><br><span class="line">                        HttpHeaderParser.parseCharset(networkResponse.headers));</span><br><span class="line">            &#125;</span><br><span class="line">            Log.i(<span class="string">"GsonRequest"</span>,json);</span><br><span class="line">            <span class="keyword">if</span>(isArray)&#123;</span><br><span class="line">                <span class="keyword">final</span> List&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line">                JsonParser parser = <span class="keyword">new</span> JsonParser();</span><br><span class="line">                JsonArray jsonArray = parser.parse(json).getAsJsonArray();</span><br><span class="line">                <span class="keyword">for</span>(JsonElement obj : jsonArray)&#123;</span><br><span class="line">                    T t = gson.fromJson(obj, clazz);</span><br><span class="line">                    list.add(t);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">new</span> Handler(context.getMainLooper()).post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span> (listListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            listListener.onResponse(list);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">return</span> Response.success(list.get(<span class="number">0</span>), HttpHeaderParser.parseCacheHeaders(networkResponse));</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Response.success(gson.fromJson(json, clazz),</span><br><span class="line">                        HttpHeaderParser.parseCacheHeaders(networkResponse));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.error(<span class="keyword">new</span> ParseError(e));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonSyntaxException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.error(<span class="keyword">new</span> ParseError(e));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deliverResponse</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            listener.onResponse(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>parseNetworkResponse</code>里先将返回的Gzip压缩的格式解码，再生成String，然后对于数组我是用过JsonParser转换成JsonArray再进行遍历生成每一个对象，最后在<code>MainLooper</code>里调用对应回调函数。</p></li><li><p>通过Type接口<br>查看Gson的fromJson函数的源码</p><figure class="highlight java"><figcaption><span>https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/Gson.java Gson.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">fromJson</span><span class="params">(String json, Class&lt;T&gt; classOfT)</span> <span class="keyword">throws</span> JsonSyntaxException </span>&#123;</span><br><span class="line">  Object object = fromJson(json, (Type) classOfT);</span><br><span class="line">  <span class="keyword">return</span> Primitives.wrap(classOfT).cast(object);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">fromJson</span><span class="params">(String json, Type typeOfT)</span> <span class="keyword">throws</span> JsonSyntaxException </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (json == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  StringReader reader = <span class="keyword">new</span> StringReader(json);</span><br><span class="line">  T target = (T) fromJson(reader, typeOfT);</span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见Gson终究是调用<code>fromJson(StringReader , Type )</code>来生成对象的，那么我们可以在创建<code>GsonRequest</code>时将传入<code>Class&lt;T&gt;</code>改为<code>Type</code>。<br>对于json对象传入<code>(Type)(MyClass.class)</code>，对于json数组传入<code>new TypeToken(ArrayList&lt;MyClass&gt;)(){}.getType()</code>。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request = <span class="keyword">new</span> GsonRequest_&lt;ArrayList&lt;WeekSubjects&gt;&gt;(Request.Method.GET,</span><br><span class="line">        NetParams.CALENDAR_URL, <span class="keyword">new</span> TypeToken&lt;ArrayList&lt;WeekSubjects&gt;&gt;()&#123;&#125;.getType(),headers,<span class="keyword">this</span>,<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p><code>Response.success</code>调用时将获得的Obeject对象强制转换为 <em>T</em>。<br>其他地方和原来一样即可。<br>GsonRequest具体例子看 <a href="https://github.com/Frezc/BangumiTimeMachine/blob/master/app/src/main/java/frezc/bangumitimemachine/app/network/http/GsonRequest_.java" target="_blank" rel="noopener">GsonRequest_</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Volley和Gson都是谷歌开发的java库，一个处理网络请求，一个处理json，对于网络app来说这2个经常会一起使用，但谷歌似乎不考虑开发两者结合使用的api，所以就需要我们自己来写了。&lt;/p&gt;
&lt;h2 id=&quot;自定义Request&quot;&gt;&lt;a href=&quot;#自定义Req
      
    
    </summary>
    
      <category term="develop" scheme="https://frezc.github.io/categories/develop/"/>
    
    
      <category term="android" scheme="https://frezc.github.io/tags/android/"/>
    
      <category term="Volley" scheme="https://frezc.github.io/tags/Volley/"/>
    
      <category term="Gson" scheme="https://frezc.github.io/tags/Gson/"/>
    
  </entry>
  
  <entry>
    <title>如何将你的项目上传到git远程库上</title>
    <link href="https://frezc.github.io/2015/05/03/push-your-project-to-git/"/>
    <id>https://frezc.github.io/2015/05/03/push-your-project-to-git/</id>
    <published>2015-05-03T08:13:55.000Z</published>
    <updated>2019-03-21T13:48:42.039Z</updated>
    
    <content type="html"><![CDATA[<p>以前我以为git只能在远程库创建后pull下来再将项目复制进去才能上传。<br>后来知道了原来可以直接通过创建本地仓库然后合并到远程仓库里，<br>我这里通过SourceTree(简称st)来演示下操作。</p><h2 id="创建远程库"><a href="#创建远程库" class="headerlink" title="创建远程库"></a>创建远程库</h2><p>你可以在oschina、github或者其他提供git服务器的网站上创建，具体不演示了我在github上创建了一个项目<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://frezc.github.io/2015/05/03/push-your-project-to-git/init.png" alt="远程库" title>                </div>                <div class="image-caption">远程库</div>            </figure></p><h2 id="创建本地库"><a href="#创建本地库" class="headerlink" title="创建本地库"></a>创建本地库</h2><p>点击st的<em>克隆/新建</em>选择创建新仓库标签，将目标路径设为你的项目根目录，点击创建<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://frezc.github.io/2015/05/03/push-your-project-to-git/init_local.png" alt="本地库" title>                </div>                <div class="image-caption">本地库</div>            </figure><br>然后点击右上角的设置，在远程仓库选项卡里点击添加，将远程库的url复制到<em>URL/路径</em>里，远端名称建议和远程库名称相同，其他的自己填写，然后确定。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://frezc.github.io/2015/05/03/push-your-project-to-git/set_remote.png" alt="设置远程库" title>                </div>                <div class="image-caption">设置远程库</div>            </figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>在你项目的选项卡里将未暂存文件暂存(建议这里在根目录写好.gitignore文件来忽略不必要上传的文件，具体怎么写去问谷歌百度)<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://frezc.github.io/2015/05/03/push-your-project-to-git/save.png" alt="暂存文件" title>                </div>                <div class="image-caption">暂存文件</div>            </figure><br>然后点击提交(提交的作者和邮箱可以在工具-选项-默认用户信息里设置)，填写好提交信息，如果你勾选了<em>立即推送变更到 - </em>则会在提交后马上执行push操作。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://frezc.github.io/2015/05/03/push-your-project-to-git/commit.png" alt="提交" title>                </div>                <div class="image-caption">提交</div>            </figure><br>如果没有勾选，这里点击推送，确定<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://frezc.github.io/2015/05/03/push-your-project-to-git/push.png" alt="推送" title>                </div>                <div class="image-caption">推送</div>            </figure><br>然后你的项目就上传到远程库了<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://frezc.github.io/2015/05/03/push-your-project-to-git/success.png" alt="成功" title>                </div>                <div class="image-caption">成功</div>            </figure></p><h2 id="其他tips"><a href="#其他tips" class="headerlink" title="其他tips"></a>其他tips</h2><ul><li>.gitignore要无视的文件和项目类型以及IDE有关，如果你用intellij idea写android项目，可以参考我的<a href="https://github.com/Frezc/BangumiTimeMachine/blob/master/.gitignore" target="_blank" rel="noopener">.gitignore</a></li><li>如果.gitignore如果无法忽视某些文件，请检查你的远程库上时候有这些文件，请提交一次删除这些文件后的项目，然后再更新.gitignore</li><li>一般来说你的远程库更新后st会自动检测到更新，如果没有请点击<strong>获取</strong>来的到更新，然后再通过<strong>拉取</strong>更新。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以前我以为git只能在远程库创建后pull下来再将项目复制进去才能上传。&lt;br&gt;后来知道了原来可以直接通过创建本地仓库然后合并到远程仓库里，&lt;br&gt;我这里通过SourceTree(简称st)来演示下操作。&lt;/p&gt;
&lt;h2 id=&quot;创建远程库&quot;&gt;&lt;a href=&quot;#创建远程库
      
    
    </summary>
    
      <category term="develop" scheme="https://frezc.github.io/categories/develop/"/>
    
    
      <category term="git" scheme="https://frezc.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>hexo使用经验分享</title>
    <link href="https://frezc.github.io/2015/05/01/2015-05-01-hexo-share/"/>
    <id>https://frezc.github.io/2015/05/01/2015-05-01-hexo-share/</id>
    <published>2015-04-30T17:08:22.000Z</published>
    <updated>2019-03-21T13:48:42.023Z</updated>
    
    <content type="html"><![CDATA[<p>首先感谢<a href="http://loger.me" target="_blank" rel="noopener">BranchZero</a>的帮忙</p><p>hexo的确是很方便的博客框架，更改主题，写文章，同步什么的几句命令就搞定了，对于不想花太多时间搞这个的人来说是个省时利器。</p><p>hexo的配置也是十分简单,按照<a href="//hexo.io">官网</a>的文档可以十分轻松地解决<br>当然第一次用还是遇到了一些问题，我也通过某些方法解决了，在这里分享一下。</p><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>墙内人民水深火热,这个不翻墙太难受了<br>我用的是<a href="http://npm.taobao.org/" target="_blank" rel="noopener">淘宝的NPM镜像</a><br>速度非常不错, 按里面的配置就ok了<br>使用时将所有 <em>npm</em> 命令改成 <em>cnpm</em> 即可</p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>主题可以去<a href="http://hexo.io/themes/" target="_blank" rel="noopener">官网</a>或github上搜索hexo找到<br>我使用的是<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia</a>,毕竟简洁清晰。<br>不过这个主题也有点问题，就是没考虑好兼容https，如果使用https则需要修改掉模板中http的一些js库引用:</p><ul><li>首先是mathjax的库引用,因为我觉得不会用到这个功能,所以直接在_config.xml中将其设为false.</li><li>然后是主题文件夹/layout/_partial/head.ejs中的<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/1.9.0/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>改为https下的jquery库引用</li></ul><h2 id="Deploy"><a href="#Deploy" class="headerlink" title="Deploy"></a>Deploy</h2><p>windows如果直接在目录下控制台中使用命令 <em>hexo d</em> 会出现错误he<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">events.js:85</span><br><span class="line">      throw er; // Unhandled <span class="string">'error'</span> event</span><br><span class="line">            ^</span><br><span class="line">Error: spawn git ENOENT</span><br><span class="line">    at exports._errnoException (util.js:746:11)</span><br><span class="line">    at Process.ChildProcess._handle.onexit (child_process.js:1053:32)</span><br><span class="line">    at child_process.js:1144:20</span><br><span class="line">    at process._tickCallback (node.js:355:11)</span><br></pre></td></tr></table></figure><br>解决方法是使用Git Bash, 如果出现了Not a gitreposity错误, 则需要你手动在.deploy_git文件夹下创建git库, 然后就能上传了。<br>远程git库地址在_config.yml中指定(详情见文档), 建议使用ssh地址, 这样配置好密钥后每次提交就不需要输入验证信息了。</p><h2 id="提升访问速度"><a href="#提升访问速度" class="headerlink" title="提升访问速度"></a>提升访问速度</h2><p>hexo模板生成的文件基本是不变的, 可以将这些文件放到国内服务器上来增加访问速度。修改模板, 将引用地址改掉, 然后将生成文件放到服务器上就ok了。<br>具体是由<a href="http://loger.me" target="_blank" rel="noopener">BranchZero</a>帮忙的 ：D.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先感谢&lt;a href=&quot;http://loger.me&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BranchZero&lt;/a&gt;的帮忙&lt;/p&gt;
&lt;p&gt;hexo的确是很方便的博客框架，更改主题，写文章，同步什么的几句命令就搞定了，对于不想花太多时间搞这个
      
    
    </summary>
    
      <category term="develop" scheme="https://frezc.github.io/categories/develop/"/>
    
    
      <category term="hexo" scheme="https://frezc.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
